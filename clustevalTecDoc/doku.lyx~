#LyX file created by tex2lyx 2.0.3
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\newcommand{\clusteval}{\textbf{clusteval} }


\usepackage{multirow}\usepackage{enumitem}\usepackage{xcolor}\usepackage{moreverb}\usepackage{varwidth}\usepackage{listings}

\lstset{prebreak=\raisebox{0ex}[0ex][0ex]
        {\ensuremath{\hookleftarrow}}}
\lstset{postbreak=\raisebox{0ex}[0ex][0ex]
        {\ensuremath{\hookrightarrow\space}}}
\lstset{breaklines=true}
\lstset{numbers=left}
\lstset{basicstyle=\ttfamily, numberstyle=\small\ttfamily}

\let\verbatiminput=\verbatimtabinput
\title{Technical Documentation: \clusteval
\\
\large An Integrated Clustering Evaluation Framework for Cluster Analysis}
\author{Christian Wiwie}
\date{\today}

\definecolor{gray}{rgb}{0.95,0.95,0.95}
%\renewcommand*{\labelitemi}{$\vdash$}
%\renewcommand*{\labelitemii}{$\vdash$}
%\renewcommand*{\labelitemiii}{$\vdash$}
%\renewcommand*{\labelitemiv}{$\vdash$}
\newcommand{\highlight}[1]{{\colorbox{gray}{\begin{varwidth}[b]{\dimexpr\linewidth-2\fboxsep}#1\end{varwidth}}}}
%\newcommand{\highlight}[1]{{\colorbox{gray}{#1}}}
%\newcommand{\highlight}[1]{#1}
\newcommand{\code}[1]{\texttt{\highlight{#1}}}
\newcommand{\codei}[1]{\texttt{\highlight{> #1}}}

\newcommand{\domain}{http://clusteval.mmci.uni-saarland.de}
\newcommand{\urltecdoc}{\domain/tecdoc.pdf}
\newcommand{\urlfrontend}{\domain/clustevalFrontend.zip}
\newcommand{\urlserver}{\domain/clustevalBackendServer.jar}
\newcommand{\urlclient}{\domain/clustevalBackendClient.jar}
\newcommand{\urlsources}{\domain/clustevalSources.zip}
\newcommand{\urljavadocs}{\domain/clustevalJavadocs.zip}
\newcommand{\vboxImage}{\domain/clustevalVbox.zip}

\newcommand{\vboxFrontend}{http://localhost/}
\newcommand{\vboxServer}{/home/clusteval/clustevalBackendServer.jar}
\newcommand{\vboxClient}{/home/clusteval/clustevalBackendClient.jar}

\newcommand{\repoconfigsuffix}{configs}
\newcommand{\repobasepath}{$<$REPOSITORY\_ROOT$>$}
\newcommand{\repodata}{\repobasepath/data}
\newcommand{\repodataconfigs}{\repodata/\repoconfigsuffix}
\newcommand{\repodatasets}{\repodata/datasets}
\newcommand{\repodatasetdir}{\repodatasets/$<$datasetFolder$>$}
\newcommand{\repodatasetfile}{\repodatasetdir/$<$datasetFile$>$}
\newcommand{\repodatasetconfigs}{\repodatasets/\repoconfigsuffix}
\newcommand{\repogoldstandards}{\repodata/goldstandards}
\newcommand{\repogoldstandarddir}{\repogoldstandards/$<$goldstandardFolder$>$}
\newcommand{\repogoldstandardfile}{\repogoldstandarddir/$<$goldstandardFile$>$}
\newcommand{\repogoldstandardconfigs}{\repogoldstandards/\repoconfigsuffix}
\newcommand{\repoprograms}{\repobasepath/programs}
\newcommand{\repoprogramconfigs}{\repoprograms/\repoconfigsuffix}
\newcommand{\repoprogramdir}{\repoprograms/$<$programFolder$>$}
\newcommand{\repoprogramexec}{\repoprogramdir/$<$executable$>$}
\newcommand{\reporprograms}{\repoprograms/$<$jarFile$>$}
\newcommand{\reporesults}{\repobasepath/results}
\newcommand{\reporesult}{\reporesults/$<$runIdentifier$>$}
\newcommand{\reporesultconfigs}{\reporesult/configs}
\newcommand{\reporesultgs}{\reporesult/goldstandards}
\newcommand{\reporesultinputs}{\reporesult/inputs}
\newcommand{\reporesultlogs}{\reporesult/logs}
\newcommand{\reporesultcluster}{\reporesult/clusters}
\newcommand{\reporesultanalyses}{\reporesult/analyses}
\newcommand{\reporuns}{\repobasepath/runs}
\newcommand{\reposupp}{\repobasepath/supp}
\newcommand{\reposuppclust}{\reposupp/clustering}
\newcommand{\reposuppparamopts}{\reposuppclust/paramOptimization}
\newcommand{\reposuppqualmeasures}{\reposuppclust/qualityMeasures}
\newcommand{\reposuppdistmeasures}{\reposupp/distanceMeasures}
\newcommand{\reposuppformats}{\reposupp/formats}
\newcommand{\reposuppinputformats}{\reposuppformats/dataset}
\newcommand{\reposuppresultformats}{\reposuppformats/runresult}
\newcommand{\reposuppgens}{\reposupp/generators}
\newcommand{\reposuppdsgens}{\reposuppgens/dataset}
\newcommand{\reposuppstats}{\reposupp/statistics}
\newcommand{\reposuppdatastats}{\reposuppstats/data}
\newcommand{\reposupprunstats}{\reposuppstats/run}
\newcommand{\reposupprundatastats}{\reposuppstats/rundata}
\newcommand{\reposupptypes}{\reposupp/types}
\newcommand{\reposuppdstypes}{\reposupptypes/dataset}


\end_preamble
\use_default_options false
\language english
\language_package none
\inputencoding latin1
\fontencoding default
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize 12
\spacing single
\use_hyperref 1
\pdf_bookmarks 1
\pdf_bookmarksnumbered 0
\pdf_bookmarksopen 0
\pdf_bookmarksopenlevel 1
\pdf_breaklinks 0
\pdf_pdfborder 0
\pdf_colorlinks 1
\pdf_backref section
\pdf_pdfusetitle 1
\pdf_quoted_options "linkcolor=blue"
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
maketitle
\end_layout

\end_inset

 
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard


\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section

Introduction
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "sec_intro"

\end_inset

 In the next sections we will discuss briefly how 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 is organized, how it works in principle and what can be achieved through its use.
\end_layout

\begin_layout Standard

Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec_inst"

\end_inset

 explains, how the framework is to be installed and, amongst other things, what prerequisites are necessary to install and use it successfully. For Debian 6 (Squeeze) we provide a detailed step-by-step installation manual. For those of you, who do not want to install it manually but want to try out the framework right away, we offer a VirtualBox hard drive image which contains a Debian 6 installation, together with the framework and all its prerequisites (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_vbox_image"

\end_inset

).
\end_layout

\begin_layout Standard

Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec_usage"

\end_inset

 demonstrates the usage of the framework by a simple use case scenario from the very start to the very end. If you want more detailed information about the use cases 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 assists with, please consult 
\begin_inset CommandInset citation
LatexCommand cite
after ""
key "wiwie_2013"

\end_inset

.
\end_layout

\begin_layout Standard

If you are a programmer and you want to extend 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

, you will find more information in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec_extend"

\end_inset

.
\end_layout

\begin_layout Section

The Framework
\end_layout

\begin_layout Standard

Our framework 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 is intended to perform automatized cluster analysis of arbitrary datasets and clustering methods. The goal is, that any clustering method known to the framework can be applied to any known dataset (with certain exceptions, partly inflicted by the clustering methods itself and partly inflicted by the framework constraints).
\end_layout

\begin_layout Standard

In general 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 is divided into a backend and a frontend. Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig_general_structure"

\end_inset

 shows the general structure of the framework. The backend is reponsible for doing all the calculations including clusterings and the frontend has only visualization purposes.
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

General framework flow
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig_general_structure"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/framework_flow.png
	width 100text%

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

At first we will give an overview of the backend in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_general_backend"

\end_inset

 and then of the frontend in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_general_frontend"

\end_inset

.
\end_layout

\begin_layout Section

Backend
\end_layout

\begin_layout Standard

The backend of the framework is responsible for all calculations. It consists of a server and a client component. The server takes commands from the client and does the calculations internally and in a multithreaded way. The client can query the server to get the current status of a calculation or to give commands to the server which might control current processes.
\end_layout

\begin_layout Section

Backend Server
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_general_backend"

\end_inset

 In principle the core of all tasks of the backend server is, to apply clustering methods to data (dataset and goldstandard) in an automatized and autonomous way, using only the configurations and inputs the user specified. The produced results have to be parsed in such a way, that the frontend can easily collect certain information and visualize them. Thus the components used by the backend that are not directly included into the framework programatically but need to be provided can be summarized as 
\end_layout

\begin_layout Itemize

Data (Datasets & Goldstandards) 
\end_layout

\begin_layout Itemize

Clustering Methods 
\end_layout

\begin_layout Itemize

Configurations 
\end_layout

\begin_layout Standard

Additional components that can be extended and might be needed in case the provided standard functionality of the framework is not sufficient for the user
\end_layout

\begin_layout Itemize

Data input formats (including parsers) 
\end_layout

\begin_layout Itemize

Run result formats (including parsers) 
\end_layout

\begin_layout Itemize

Clustering Quality Measures 
\end_layout

\begin_layout Itemize

Distance Measures 
\end_layout

\begin_layout Itemize

Parameter Optimization Methods 
\end_layout

\begin_layout Itemize

Dataset types 
\end_layout

\begin_layout Itemize

(Data, Run & Run-Data) Statistics 
\end_layout

\begin_layout Itemize

Dataset generators 
\end_layout

\begin_layout Standard

All these components have to be located in the 
\series bold
repository
\series default
 of the framework (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_repository"

\end_inset

 for more details). The repository is a file system hierarchy located at a specified path and contains all components used by and available to the framework. Datasets, clustering methods or configurations outside the repository cannot be used by the framework.
\end_layout

\begin_layout Standard

After these components have been made available to the backend, they can be combined almost arbitrarily. In the following we will describe the dependencies of each of these components which need to be fulfilled such that a new component of each type can be recognized and used by the framework.
\end_layout

\begin_layout Subsection

Repository
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_repository"

\end_inset

 The backend server is based on a central repository which concludes all files in its folder structure. You can easily start a framework with a different set of files by simply using another repository.
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Repository folder structure
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/repository_structure.png
	width 100text%

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

Repository folder structure
\end_layout

\begin_deeper
\begin_layout Standard

[noitemsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
data
\series default
: Contains all data-related files. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
configs
\series default
 [*.dataconfig]: Contains the data configuration files 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:dataconfigs"

\end_inset

. 
\end_layout

\begin_layout Itemize


\series bold
datasets
\series default
: Contains all dataset-related files 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:datasets"

\end_inset

. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
configs
\series default
 [*.dsconfig]: Contains the dataset configuration files 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:datasetconfigs"

\end_inset

. 
\end_layout

\begin_layout Itemize


\series bold
[subfolder for every dataset]
\series default
: The dataset files themselves. 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
goldstandards
\series default
: Contains all goldstandard-related files 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec:goldstandards"

\end_inset

. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
configs
\series default
 [*.gsconfig]: Contains the goldstandard configurations 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:gsconfigs"

\end_inset

. 
\end_layout

\begin_layout Itemize


\series bold
[subfolder for every goldstandard]
\series default
: Contains the goldstandard files themselves. 
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize


\series bold
programs
\series default
: Contains all program-related files 
\begin_inset CommandInset ref
LatexCommand ref
reference "programs"

\end_inset

. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
configs
\series default
 [*.config]: Contains all program configuration files 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_programconfigs"

\end_inset

. 
\end_layout

\begin_layout Itemize


\series bold
[subfolder for every program]
\series default
: The program files themselves. 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
results
\series default
: The results of run executions 
\begin_inset CommandInset ref
LatexCommand ref
reference "runresults"

\end_inset

. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
[subfolder for every run execution]
\series default
: A subfolder contains the results of one run execution. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
clusters
\series default
: The clustering results, including clustering qualities and graphics. 
\end_layout

\begin_layout Itemize


\series bold
configs
\series default
: Copies of all used configuration files of this run execution to enable exact reproduction. 
\end_layout

\begin_layout Itemize


\series bold
inputs
\series default
: Copies of all used inputs of this run execution to enable exact reproduction. 
\end_layout

\begin_layout Itemize


\series bold
logs
\series default
: All log files corresponding to this run execution. 
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize


\series bold
runs
\series default
: All run-related files 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:runs"

\end_inset

. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
[*.run: a file for every run]
\series default
: Contains the run-files. 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
supp
\series default
: Contains supplementary material. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
clustering
\series default
: Supplementary material related to clusterings. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
paramOptimization
\series default
: Contains clustering parameter optimization methods 
\begin_inset CommandInset ref
LatexCommand ref
reference "paramOptMethods"

\end_inset

. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
[*.jar]
\series default
: Each jar-file corresponds to a parameter optimization method and is loaded dynamically by the framework. 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
qualityMeasures
\series default
: Contains clustering quality measures 
\begin_inset CommandInset ref
LatexCommand ref
reference "clustQualMeasures"

\end_inset

. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
[*.jar]
\series default
: Each jar-file corresponds to a clustering quality measure and is loaded dynamically by the framework. 
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize


\series bold
formats
\series default
: Contains all formats used by the framework. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
dataset
\series default
: Contains all dataset formats 
\begin_inset CommandInset ref
LatexCommand ref
reference "formats"

\end_inset

. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
[*.jar]
\series default
: Each jar-file corresponds to a dataset format and is loaded dynamically by the framework. 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
runresult
\series default
: Contains all runresult formats 
\begin_inset CommandInset ref
LatexCommand ref
reference "formats"

\end_inset

. 
\end_layout

\begin_deeper
\begin_deeper
\begin_layout Standard

[noitemsep,nolistsep] 
\end_layout

\end_deeper
\begin_layout Itemize


\series bold
[*.jar]
\series default
: Each jar-file corresponds to a runresult format and is loaded dynamically by the framework. 
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Subsection

Clustering Methods
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "programs"

\end_inset

 Clustering Methods (technically also called 
\series bold
Programs
\series default
 throughout this guide) can be executed by the framework, and be applied to data to calculate clusterings. In order to include a new clustering method and use it within the framework, 
\end_layout

\begin_layout Itemize

the 
\series bold
executable
\series default
 of the method has to be made available to the framework (an exception are Clustering Methods provided through the R framework, see 
\begin_inset CommandInset ref
LatexCommand ref
reference "rprograms"

\end_inset

), 
\end_layout

\begin_layout Itemize

the method itself has to be specified in a configuration file (called 
\series bold
program configuration
\series default
) 
\end_layout

\begin_layout Itemize

all other components (e.g. 
\series bold
input
\series default
 and 
\series bold
output formats
\series default
) specified in the program configuration need to be available. 
\end_layout

\begin_layout Standard

The configuration file for a clustering method (short 
\series bold
program configuration
\series default
) contains all information required, such that the framework can execute the method in an automatized and autonomous way. These information include for example, among others, the name of the method, its supported input formats, its output format, its parameters (including type and valid range of values). An exact description of how program configurations look like and which options and settings need to be specified can be found in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_programconfigs"

\end_inset

.
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 ships with a set of clustering methods including 
\end_layout

\begin_layout Itemize

Affinity Propagation 
\end_layout

\begin_layout Itemize

Hierarchical Clustering
\begin_inset Formula $^{(Rserve)}$
\end_inset

 
\end_layout

\begin_layout Itemize

K-Means
\begin_inset Formula $^{(Rserve)}$
\end_inset

 
\end_layout

\begin_layout Itemize

Markov Clustering 
\end_layout

\begin_layout Itemize

Spectral Clustering
\begin_inset Formula $^{(Rserve)}$
\end_inset

 
\end_layout

\begin_layout Itemize

Transitivity Clustering 
\end_layout

\begin_layout Standard

For every of these clustering methods a 
\series bold
program configuration
\series default
 is also provided, such that they are directly usable from the start. Of course these program configurations can be modified and adapted to the user's needs.
\end_layout

\begin_layout Subsubsection

Standalone Programs
\end_layout

\begin_layout Standard

are programs that come as an executable. Those can be performed by the framework, after they have been specified in a program configuration. The executable needs to be compatible to the server architecture 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 runs on and they need to be executable (+x modifier). How you can add your own standalone programs into the framework can be found here 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec_extend_standprograms"

\end_inset

 
\end_layout

\begin_layout Subsubsection

R Programs
\begin_inset Formula $^{(Rserve)}$
\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "rprograms"

\end_inset

 are programs, that are implemented within some R package. Arbitrary methods implemented in R can be used as a program, as long as they can be made available within R on the server. This implies that the corresponding R Program is available for your R version and that it can be compiled and installed on your server architecture. How you can add your own R Programs into the framework can be found here 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec_extend_rprograms"

\end_inset

.
\end_layout

\begin_layout Subsection

Datasets
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec:datasets"

\end_inset

 To add a dataset to the framework and make it usable, such that clustering methods can be applied to it, you have to 
\end_layout

\begin_layout Itemize

insert the dataset file into the repository of the backend 
\end_layout

\begin_layout Itemize

insert a header into the dataset which specifies its format, format version and type 
\end_layout

\begin_layout Itemize

specify the dataset in a configuration file (called 
\series bold
dataset configuration
\series default
) 
\end_layout

\begin_layout Standard

The dataset configuration contains the name and path of the dataset and other details how a possible conversion of the dataset should be handled. An exact description of how dataset configurations look like and which options and settings need to be specified can be found in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:datasetconfigs"

\end_inset

.
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 ships with a set of datasets of different types (PPI, Gene Expression, Protein similarity, Word-Sense disambiguation), for example 
\end_layout

\begin_layout Itemize

subsets of SCOP Astral95 v1.61, 
\end_layout

\begin_layout Itemize

Brown et al. protein simliarities, 
\end_layout

\begin_layout Itemize

leukemia microarray gene expression (Broad Institute), 
\end_layout

\begin_layout Itemize

word context counts for word-sense disambiguation 
\end_layout

\begin_layout Subsection

Goldstandards
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec:goldstandards"

\end_inset

 When assessing the qualities of a resulting clustering for most measures a goldstandard corresponding to the dataset is needed. The comparison of the clustering and goldstandard is then integrated into the calculation of the clustering quality measure (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "clustQualMeasures"

\end_inset

).
\end_layout

\begin_layout Standard

Goldstandards for a dataset are 
\series bold
in principle optional
\series default
. Some operations can be also performed without a goldstandard and also some clustering quality measures do not require a goldstandard (for example Silhouette Value).
\end_layout

\begin_layout Standard

Nevertheless, to be able to perform 
\series bold
all operations
\series default
 on the dataset, a 
\series bold
goldstandard is required
\series default
.
\end_layout

\begin_layout Standard

To add a goldstandard to the framework, you have to 
\end_layout

\begin_layout Itemize

insert the goldstandard file into the repository of the backend 
\end_layout

\begin_layout Itemize

specify the goldstandard in a configuration file (called 
\series bold
goldstandard configuration
\series default
) 
\end_layout

\begin_layout Standard

The goldstandard configuration contains the name and path to the goldstandard file. Since the framework does only support one goldstandard format, this does not need to be provided. An exact description of how goldstandard configurations look like and which options and settings need to be specified can be found in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:gsconfigs"

\end_inset

.
\end_layout

\begin_layout Subsection

Input & Output formats
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "formats"

\end_inset

 As already mentioned, datasets have their own formats and clustering methods can require different input and output formats. The general process how these formats link together can be visualized as seen in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig_format_conversion_processes"

\end_inset

.
\end_layout

\begin_layout Standard

A dataset of a certain format known to the framework is converted into the standard input format of the framework using the parser belonging to the format of the dataset. Then the dataset in the standard format is converted to any of the supported input formats of the clustering method using the parser belonging to the chosen supported input format of the clustering method. Now the clustering method is applied to the dataset in the supported format. A clustering result is produced in the format of the clustering method. This result is then converted to the standard output format of the framework using the parser belonging to the format of the result. The framework then has access to the clustering results of the clustering method applied to the dataset in a format it understands, such that diverse operations can be performed on the result.
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Format conversion processes
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig_format_conversion_processes"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/flow_dataset.png
	width 75text%

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

If a new clustering method is added to the framework, its input and output formats need to be known to the framework.
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 ships with a set of supported input and output formats. The input formats are
\end_layout

\begin_layout Itemize

APRowSimDataSetFormat 
\end_layout

\begin_layout Itemize

BLASTDataSetFormat 
\end_layout

\begin_layout Itemize

MatrixDataSetFormat 
\end_layout

\begin_layout Itemize

RowSimDataSetFormat 
\end_layout

\begin_layout Itemize

SimMatrixDataSetFormat 
\end_layout

\begin_layout Itemize

TransClustSimMatrixDataSetFormat 
\end_layout

\begin_layout Standard

and the output formats are 
\end_layout

\begin_layout Itemize

APRunResultFormat 
\end_layout

\begin_layout Itemize

MCLRunResultFormat 
\end_layout

\begin_layout Itemize

TabSeparatedRunResultFormat 
\end_layout

\begin_layout Itemize

TransClustRunResultFormat 
\end_layout

\begin_layout Standard

If the new clustering method requires another input format not in the list, you will have to make it available to the framework by writing 
\end_layout

\begin_layout Itemize

a wrapper class for this dataset format and 
\end_layout

\begin_layout Itemize

a parser, which converts the standardized input format of this framework to this input format. 
\end_layout

\begin_layout Standard

If the new clustering method has a so far unknown output format, you will have to provide 
\end_layout

\begin_layout Itemize

a wrapper class for this output format as well as 
\end_layout

\begin_layout Itemize

a parser that converts that format to the standardized output format. 
\end_layout

\begin_layout Standard

When this clustering method is applied to a dataset, the resulting clustering in the new format is converted to a standardized output format using your parser, such that further analyses can be performed regardless of the used clustering method.
\end_layout

\begin_layout Standard

For more information on how the framework can be extended by new input or output formats see 
\begin_inset CommandInset ref
LatexCommand ref
reference "formats"

\end_inset

 respectively.
\end_layout

\begin_layout Subsubsection

Standard input format
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsubsec:standarddatasetformat"

\end_inset

 The standard input format is a SimMatrixDataSetFormat which is described under 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:simmatrixdatasetformat"

\end_inset

. 
\end_layout

\begin_layout Subsubsection

APRowSimDataSetFormat
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "aprowsimdatasetformat"

\end_inset

 This input format is used by Affinity Propagation. It is similar to the RowSimDataSetFormat, except that it accepts only numbers as ids and that it leaves out lines where id1=id2 such that it looks like this: 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

1	2	0.2
\end_layout

\begin_layout Plain Layout

1	3	0.6
\end_layout

\begin_layout Plain Layout

2	1	0.2
\end_layout

\begin_layout Plain Layout

2	3	0.5
\end_layout

\begin_layout Plain Layout

3	1	0.6
\end_layout

\begin_layout Plain Layout

3	2	0.5				
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

BLASTDataSetFormat
\end_layout

\begin_layout Standard

The BLAST dataset format needs a all-vs-all BLAST file and a corresponding FASTA file.
\end_layout

\begin_layout Standard


\series bold
Please note
\series default
, that the FASTA file has to be named exactly like the BLAST file plus the additional .fasta extension. If the BLAST file is named like MyBlastFile.blast, then the FASTA file only be found by the framework, when it lies in the same directory and is named MyBlastFile.blast.fasta.
\end_layout

\begin_layout Standard


\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

d1dlwa_	d1dlwa_	77.59	116	0	0	1	116	1	116	4.4e-46	172.6
\end_layout

\begin_layout Plain Layout

d1dlwa_	d1idra_	40.30	67	40	0	19	85	31	97	3.2e-12	60.08
\end_layout

\begin_layout Plain Layout

d1dlwa_	d1dlya_	32.00	100	62	1	19	116	19	118	1.6e-11	57.77
\end_layout

\begin_layout Plain Layout

d1dlwa_	d2gdm__	45.45	22	12	0	60	81	89	110	0.435	23.10
\end_layout

\begin_layout Plain Layout

d1dlwa_	d1cqxa1	37.50	24	15	0	62	85	79	102	0.969	21.94
\end_layout

\begin_layout Plain Layout

d1dlwa_	d1cqxa1	40.00	5	3	0	71	75	134	138	4975.0	9.62
\end_layout

\begin_layout Plain Layout

d1dlwa_	d1kr7a_	31.25	32	22	0	41	72	45	76	  4.8	19.63
\end_layout

\begin_layout Plain Layout

d1dlwa_	d1kr7a_	50.00	8	4	0	50	57	91	98	202.0	14.24
\end_layout

\begin_layout Plain Layout

d1dlwa_	d1kr7a_	66.67	3	1	0	50	52	86	88	6497.5	9.23
\end_layout

\begin_layout Plain Layout

d1dlwa_	d1edg__	45.00	20	11	0	47	66	262	281	  6.3	19.25			
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

>d1dlwa_
\end_layout

\begin_layout Plain Layout

slfeqlggqaavqavtaqfyaniqadatvatffngidmpnqtnktaaflc
\end_layout

\begin_layout Plain Layout

>d1dlya_
\end_layout

\begin_layout Plain Layout

slfaklggreaveaavdkfynkivadptvstyfsntdmkvqrskqfafla
\end_layout

\begin_layout Plain Layout

>d1idra_
\end_layout

\begin_layout Plain Layout

gllsrlrkrepisiydkiggheaievvvedfyvrvladdqlsaffsgtnm
\end_layout

\begin_layout Plain Layout

>d1kr7a_
\end_layout

\begin_layout Plain Layout

mvnwaavvddfyqelfkahpeyqnkfgfkgvalgslkgnaayktqagktv
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

MatrixDataSetFormat
\end_layout

\begin_layout Standard

This input format is a absolute dataset format, that means it contains samples together with their absolute coordinates:
\end_layout

\begin_layout Standard


\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

ALL_19769_B.cell	759	169	54	36
\end_layout

\begin_layout Plain Layout

ALL_19769_B.cell_2	1062	88	235	38
\end_layout

\begin_layout Plain Layout

ALL_28373_B.cell	822	196	150	120
\end_layout

\begin_layout Plain Layout

ALL_28373_B.cell_2	1068	146	221	16
\end_layout

\begin_layout Plain Layout

ALL_9692_B.cell		1455	53	217	169
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

RowSimDataSetFormat
\end_layout

\begin_layout Standard

This input format consists of tab-separated rows looking as follows: 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

id1	id1	1.0
\end_layout

\begin_layout Plain Layout

id1	id2	0.2
\end_layout

\begin_layout Plain Layout

id1	id3	0.6
\end_layout

\begin_layout Plain Layout

id2	id1	0.2
\end_layout

\begin_layout Plain Layout

id2	id2	1.0
\end_layout

\begin_layout Plain Layout

id2	id3	0.5
\end_layout

\begin_layout Plain Layout

id3	id1	0.6
\end_layout

\begin_layout Plain Layout

id3	id2	0.5
\end_layout

\begin_layout Plain Layout

id3	id3	1.0				
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

SimMatrixDataSetFormat
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsubsec:simmatrixdatasetformat"

\end_inset

 The SimMatrixDataSetFormat is a complete quadratic tab-separated similarity matrix with header row and column (containing ids). A dataset file with the SimMatrixDataSetFormat could look as follows: 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

id1	id2	id3
\end_layout

\begin_layout Plain Layout

id1	1.0	0.2	0.6
\end_layout

\begin_layout Plain Layout

id2	0.2	1.0	0.5
\end_layout

\begin_layout Plain Layout

id3	0.6	0.5	1.0
\end_layout

\end_inset

There are no spaces in this file, only tabs. It does not necessarily need to be symmetric, it depends on the clustering method, whether it supports asymmetric similarity data.
\end_layout

\begin_layout Subsubsection

TransClustSimMatrixDataSetFormat
\end_layout

\begin_layout Standard

This format can be used by Transitivity Clustering and it looks as follows: 
\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

3	
\end_layout

\begin_layout Plain Layout

id1
\end_layout

\begin_layout Plain Layout

id2
\end_layout

\begin_layout Plain Layout

id3
\end_layout

\begin_layout Plain Layout

0.2	0.6
\end_layout

\begin_layout Plain Layout

0.5
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The number in the first line is the number of ids. It is followed by all ids in the next lines. Then it follows the tab-separated upper half of the similarity matrix. This format expects that the similarity matrix is symmetric.
\end_layout

\begin_layout Subsubsection

Standard output format
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsubsec:standardrunresultformat"

\end_inset

 The standard output format contains one clustering generated for parameter values 
\begin_inset Formula $p_1=v1$
\end_inset

,...,
\begin_inset Formula $p_K=vK$
\end_inset

 in one line with clusters 
\begin_inset Formula $c1,...,cK$
\end_inset

, cluster sizes 
\begin_inset Formula $size(ci) = si$
\end_inset

. Every cluster 
\begin_inset Formula $ci$
\end_inset

 contains elements 
\begin_inset Formula $e\_i\_1,...,e\_i\_si$
\end_inset

 with fuzzy coefficients 
\begin_inset Formula $f\_i\_1,...,f\_i\_si$
\end_inset

. The format for this looks as follows:
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

 p1,...,pK Clustering v1,...,vK e11:f11,...,e1s1:f1s1;...;eK1:fK1,...,eKsK:fKsK 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The parameter names and values on the left have to be separated by a TAB from the string "Clustering" and the clustering on the right. If the fuzzy coefficients are missing, the framework will not be able to parse the result file.
\end_layout

\begin_layout Subsubsection

APRunResultFormat
\end_layout

\begin_layout Standard

This is the result format of Affinity Propagation. 
\end_layout

\begin_layout Subsubsection

MCLRunResultFormat
\end_layout

\begin_layout Standard

This is the result format of Markov Clustering. 
\end_layout

\begin_layout Subsubsection

TransClustRunResultFormat
\end_layout

\begin_layout Standard

This is the result format of Transitivity Clustering.
\end_layout

\begin_layout Subsection

Clustering Quality Measures
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "clustQualMeasures"

\end_inset

 The clustering quality measures are used by the framework to assess the quality of calculated clusterings. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 ships with a standard set of clustering quality measures 
\end_layout

\begin_layout Itemize

F1 & F2-Score 
\end_layout

\begin_layout Itemize

False Discovery Rate (FDR) 
\end_layout

\begin_layout Itemize

False Positive Rate (FPR) 
\end_layout

\begin_layout Itemize

Rand Index 
\end_layout

\begin_layout Itemize

Sensitivity 
\end_layout

\begin_layout Itemize

Specificity 
\end_layout

\begin_layout Itemize

Silhouette Value (Java & R implementation) 
\end_layout

\begin_layout Standard

Please check 
\begin_inset CommandInset ref
LatexCommand ref
reference "clustQualMeasures"

\end_inset

 for more information on how to extend the framework by new clustering quality measures. 
\end_layout

\begin_layout Subsection

Distance Measures
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "distanceMeasures"

\end_inset

 The distance measures are used when converting absolute datasets (containing absolute coordinates) to relative datasets (pairwise similarities). The distance measures define how to assess the similarity between a pair of objects given their absolute coordinates. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 ships with the following distance measures 
\end_layout

\begin_layout Itemize

Euclidian 
\end_layout

\begin_layout Itemize

Hoeffding D Statistic
\begin_inset Formula $^{(Rserve)}$
\end_inset

 
\end_layout

\begin_layout Itemize

Pearson Correlation Coefficient
\begin_inset Formula $^{(Rserve)}$
\end_inset

 
\end_layout

\begin_layout Itemize

Spearman Correlation Coefficient
\begin_inset Formula $^{(Rserve)}$
\end_inset

 
\end_layout

\begin_layout Standard

Please check 
\begin_inset CommandInset ref
LatexCommand ref
reference "distanceMeasures"

\end_inset

 for more information on how to extend the framework by new distance measures. 
\end_layout

\begin_layout Subsection

Parameter Optimization Methods
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "paramOptMethods"

\end_inset

 The backend can perform automatized and autonomous optimization of parameters of clustering methods. This is an iterative procedure where the backend assesses qualities of clustering results of the last iteration and adapts the parameter for the next iteration in order to find optimal parameters for the method on the given data. The parameter optimization method determines the following aspects:
\end_layout

\begin_layout Enumerate

the number of iterations of the optimization process 
\end_layout

\begin_layout Enumerate

the parameter sets evaluated 
\end_layout

\begin_layout Enumerate

the handling of diverging iterations 
\end_layout

\begin_layout Enumerate

the storage of the iteration results in RAM 
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 ships with the following set of parameter optimization methods 
\end_layout

\begin_layout Itemize

Affinity Propagation Divisive Parameter Optimization Method 
\end_layout

\begin_layout Itemize

Affinity Propagation Parameter Optimization Method 
\end_layout

\begin_layout Itemize

Divisive Parameter Optimization Method 
\end_layout

\begin_layout Itemize

Gap Statistic Parameter Optimization Method 
\end_layout

\begin_layout Itemize

Layered Divisive Parameter Optimization Method 
\end_layout

\begin_layout Itemize

Transitivity Clustering Parameter Optimization Method 
\end_layout

\begin_layout Itemize

Transitivity Clustering Quantile Parameter Optimization Method 
\end_layout

\begin_layout Standard

Detailed information about each of these methods can be found in 
\begin_inset CommandInset citation
LatexCommand cite
after ""
key "wiwie_2013"

\end_inset

. Please check 
\begin_inset CommandInset ref
LatexCommand ref
reference "paramOptMethods"

\end_inset

 for more information on how to extend the framework by new parameter optimization methods.
\end_layout

\begin_layout Subsection

Configuration Files
\end_layout

\begin_layout Standard

Above we already discussed that the framework needs 
\series bold
program configurations
\series default
, 
\series bold
dataset configurations
\series default
 and 
\series bold
goldstandard configurations
\series default
. Those configuration files directly reference corresponding files (dataset, goldstandard, \SpecialChar \ldots{}
) on the filesystem. Internally the framework has some abstraction layers to store all the configurations. Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig_backend_configurations"

\end_inset

 shows the overall abstractional structure of the configuration files used in the backend. One can see that dataset- and goldstandard configuration are linked together in a 
\series bold
data configuration
\series default
.
\end_layout

\begin_layout Standard

A run is an abstract entity that can be performed by the backend. Its execution involves (in most cases) application of clustering methods to several datasets, and afterwards clustering qualities are assessed using the goldstandards corresponding to each dataset. A run corresponds to a 
\series bold
run configuration
\series default
 file, which then again references the 
\series bold
program-
\series default
 and 
\series bold
data configurations
\series default
 that should be pairwise combined.
\end_layout

\begin_layout Standard

When a run is performed by the backend, the clustering methods wrapped by all referenced program configurations are applied to all datasets indirectly referenced through the data configurations.
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Backend Configurations
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig_backend_configurations"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/backend_configurations.png
	width 75text%

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

Data Configurations
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec:dataconfigs"

\end_inset

 A data configuration is a file, that combines two other configurations together: A dataset configuration (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:datasetconfigs"

\end_inset

) and a goldstandard configuration (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsubsec:gsconfigs"

\end_inset

). Later on when you create a run (and its configuration) and in this run you want to apply two clustering methods to three datasets (together with their goldstandards) you will do so by telling the run configuration the names of the three corresponding data configurations. 
\series bold
Please note:
\series default
 The data configuration file has to have the file extension .dataconfig, otherwise it will not be recognized by the framework. 
\end_layout

\begin_layout Description

datasetConfig: This option has to be set to the name of the dataset configuration (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "para:datasetName"

\end_inset

), 
\shape italic
not
\shape default
 the name of the file.
\end_layout

\begin_layout Description

goldstandardConfig: This option has to be set to the name of the goldstandard configuration (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "para:goldstandardName"

\end_inset

), 
\shape italic
not
\shape default
 the name of the file. 
\end_layout

\begin_layout Subsubsection

Example Data Configuration
\end_layout

\begin_layout Standard

A data configuration could like as follows: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{listing}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 datasetConfig = astral1 goldstandardConfig = astral1161
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{listing}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

Dataset Configuration
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsubsec:datasetconfigs"

\end_inset

 A dataset configuration tells the framework meta information about the corresponding dataset. That is: The internal name of the dataset, its filename and its format.
\end_layout

\begin_layout Description

datasetName: 
\begin_inset CommandInset label
LatexCommand label
name "para:datasetName"

\end_inset

 This name is used to find and access datasets within the framework. The name of the dataset 
\shape italic
has
\shape default
 to be identical to the subfolder of the corresponding dataset. 
\end_layout

\begin_layout Description

datasetFile: 
\begin_inset CommandInset label
LatexCommand label
name "para:datasetFile"

\end_inset

 This option has to be set to the filename of the dataset file residing within the subfolder of the dataset. 
\end_layout

\begin_layout Description

datasetFormat: 
\begin_inset CommandInset label
LatexCommand label
name "para:datasetFormat"

\end_inset

 This option tells the framework, which format the dataset is in. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 ships with a set of supported dataset formats. Please note, that the entries in this list 
\shape italic
have
\shape default
 to be identical with the simple names of the corresponding dataset format classes. 
\end_layout

\begin_layout Description

[distanceMeasureAbsoluteToRelative: ] This indicates, which distance measure should be used, when this dataset is converted to another format. Defaults to EuclidianDistanceMeasure. 
\end_layout

\begin_layout Subsubsection

Example Dataset Configuration
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{listing}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 datasetName = astral1161 datasetFile = blastResults.txt datasetFormat = BLASTDataSetFormat distanceMeasureAbsoluteToRelative = EuclidianDistanceMeasure 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{listing}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

GoldStandard Configuration
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsubsec:gsconfigs"

\end_inset

 A goldstandard configuration tells the framework meta information about the corresponding goldstandard. That is: The internal name of the goldstandard and its filename.
\end_layout

\begin_layout Description

goldstandardName: 
\begin_inset CommandInset label
LatexCommand label
name "para:goldstandardName"

\end_inset

 This name is used to find and access goldstandards within the framework. The name of the goldstandard 
\shape italic
has
\shape default
 to be identical to the subfolder of the corresponding goldstandard. 
\end_layout

\begin_layout Description

goldstandardFile: 
\begin_inset CommandInset label
LatexCommand label
name "para:goldstandardFile"

\end_inset

 This option has to be set to the filename of the goldstandard file residing within the subfolder of the goldstandard. 
\end_layout

\begin_layout Subsubsection

Example Goldstandard Configuration
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{listing}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 goldstandardName = astral1161 goldstandardFile = astral161.goldstandard3.txt 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{listing}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

Program Configurations
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_programconfigs"

\end_inset

 For every clustering method there can be several configuration files. All program configurations have to be located in 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
repoprogramconfigs
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. A program configuration tells the framework, what parameters the program expects, how to invoke the executable, with what parameter values to invoke it and several other information. Possible entries in a program configuration follow.
\end_layout

\begin_layout Standard


\series bold
Please note:
\series default
 The program configuration file has to have the file extension 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

.config
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, otherwise it will not be recognized by the framework.
\end_layout

\begin_layout Description

type: Indicates, whether the program described by this program configuration is a standalone or an R program. This option can be set to either 
\shape italic
standalone
\shape default
 or the simple name of the R program class.
\end_layout

\begin_layout Description

program: This is the full name of the clustering method, this configuration references. When a clustering method is located in 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
repoprograms
\end_layout

\end_inset

/some/program
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

, then the full name of the program is "some/program"
\end_layout

\begin_layout Description

alias: This option is only interpreted for standalone programs. It tells the framework a alias of the corresponding program, which is used whenever the program needs to be represented in a readable format, e.g. on the website.
\end_layout

\begin_layout Description

parameters: A comma-separated list of parameters the program uses and which can be used when the program is invoked. These parameters need to be set to valid values before the program is actually applied to a dataset. Parameter values can be specificely defined either in a program or run configuration or, in case of parameter optimization runs, they are autonomously determined by the framework. If no value is defined for a program parameter at all, it will be set to its default value given in the program configuration.
\end_layout

\begin_layout Description

optimizationParameters: This option is only used, when a run is performed in parameter optimization mode. Then this list of parameters (that needs to be a subset of the list given in option "parameters") is used to determine, which parameters can be in principle optimized when this program is used in parameter optimization mode.
\end_layout

\begin_layout Description

compatibleDataSetFormats: This list tells the framework, which input formats this program supports. Please note, that the entries in this list 
\shape italic
have
\shape default
 to be identical to the simple names of the classes of the corresponding dataset formats.
\end_layout

\begin_layout Description

outputFormat: This option tells the framework, what the output format of this program is. Please note, that the naming convention of this list follows the same rules as those of "compatibleDataSetFormats", as the value of this option has to be named exactly after the simple name of the corresponding class.
\end_layout

\begin_layout Description

expectsNormalizedDataSet: This option can be set to "true" or "false". By default, it is set to false. If you set it to true, the input similarities (only) for this program are normalized to values between 0 and 1. This may help you, if a clustering method does not support negative values or values outside certain ranges.
\end_layout

\begin_layout Description

[invocationFormat ] This is the section containing a set of invocation formats which tell the framework in string format, how to invoke this program. The invocation formats may contain program parameters or certain predefined variables, which are replaced by the framework during runtime. Such variable names are enclosed by % signs. All program parameters defined in the parameters section of the program configuration can be used in the invocation format string. Additionally the following variables are hardcoded for every program and cannot be used for other parameters: 
\end_layout

\begin_deeper
\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

%e%]
\end_layout

\begin_layout Standard


\end_layout

\end_inset

 will be replaced by the absolute path of the executable 
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

%i%]
\end_layout

\begin_layout Standard


\end_layout

\end_inset

 will be replaced by the absolute path of the input 
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

%o%]
\end_layout

\begin_layout Standard


\end_layout

\end_inset

 will be replaced by the absolute path of the output 
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

%gs%]
\end_layout

\begin_layout Standard


\end_layout

\end_inset

 will be replaced by the absolute path of the goldstandard 
\end_layout

\end_deeper
\begin_deeper
\begin_layout Standard

For example, if the option is set like this:
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

invocationFormat = %e% %i% %preference% %o% maxits=%maxits% convits=%convits%
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

"preference", "maxits" and "convits" have to be defined in the "parameters" entry of the same program configuration.
\end_layout

\begin_layout Description

invocationFormat: This is the option which tells the framework, how to invoke this program in case we have a goldstandard and no parameter optimization run. All words enclosed with % will be replaced by the framework at runtime. All other variables in the invocation line have to be parameters defined in this program configuration.
\end_layout

\begin_layout Description

invocationFormatWithoutGoldStandard: This is how to invoke this program in case we have no goldstandard and no parameter optimization run.
\end_layout

\begin_layout Description

invocationFormatParameterOptimization: This is how to invoke this program in case we have a goldstandard and a parameter optimization run.
\end_layout

\begin_layout Description

invocationFormatParameterOptimizationWithoutGoldStandard: This is how to invoke this program in case we have no goldstandard and a parameter optimization run. 
\end_layout

\end_deeper
\begin_layout Description

[
\begin_inset Formula $<$
\end_inset

parameterName
\begin_inset Formula $>$
\end_inset

 ] For every parameter defined in the list of entry "parameters", there needs to be an additional section in the program configuration, which tells the framework several information about the parameter: 
\end_layout

\begin_deeper
\begin_layout Description

desc: A description of the parameter 
\end_layout

\begin_layout Description

type: One of the types FLOAT ("2"), INTEGER ("1") or STRING ("0"). 
\end_layout

\begin_layout Description

def: A default value for the parameter. 
\end_layout

\begin_layout Description

minValue: The minimal value for the parameter. 
\end_layout

\begin_layout Description

maxValue: The maximal value for the parameter. 
\end_layout

\end_deeper
\begin_layout Subsubsection

Example program configuration
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard

%
\backslash
fontsize{10pt}{12pt}
\end_layout

\begin_layout Standard


\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{listing}
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

1
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 program = APcluster parameters = preference,maxits,convits,dampfact optimizationParameters = preference,maxits,convits,dampfact executable = apcluster compatibleDataSetFormats = APRowSimDataSetFormat outputFormat = APRunResultFormat
\end_layout

\begin_layout Standard

[invocationFormat] invocationFormat = 
\begin_inset ERT
status collapsed

\begin_layout Standard

%e %i %preference %o maxits=%maxits convits=%convits 
\end_layout

\begin_layout Standard


\end_layout

\end_inset

dampfact=
\begin_inset ERT
status collapsed

\begin_layout Standard

%dampfact
\end_layout

\begin_layout Standard


\end_layout

\end_inset


\end_layout

\begin_layout Standard

[maxits] desc = Max iterations type = 1 def = 2000 minValue = 2000 maxValue = 5000
\end_layout

\begin_layout Standard

[convits] desc = Cluster Center duration type = 1 def = 200 minValue = 200 maxValue = 500
\end_layout

\begin_layout Standard

[dampfact] type = 2 def = 0.9 minValue = 0.7 maxValue = 0.99
\end_layout

\begin_layout Standard

[preference] desc = Preference type = 2 def = 0.5 minValue = 0.0 maxValue = 1.0 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{listing}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection

Runs
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "sec:runs"

\end_inset


\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Inheritance of different run types
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig_run_inheritance"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/run_inheritance.png
	width 60text%

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Standard

Runs are entities that can be performed by the backend server. A run is defined by a file in the folder 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reporuns
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. The name of that file (without extension) also defines the name of the run. Depending on the type of the run this file contains several other components which configure the process when the run is performed. Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig_run_inheritance"

\end_inset

 shows the different types of runs and how they relate to each other.
\end_layout

\begin_layout Subsubsection

Run Files
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "run_files"

\end_inset


\end_layout

\begin_layout Standard

Every run is defined in a run-file in the corresponding folder of the repository. Depending on the type of the run, different options are available that can be specified in the run-file. Common to all types of runs are the following options:
\end_layout

\begin_layout Description

mode: 
\begin_inset CommandInset label
LatexCommand label
name "subsubsec:runconfigmode"

\end_inset

 This entry can be set to "clustering", "parameter_optimization", "dataAnalysis", "runAnalysis" or "runDataAnalysis". These types can be found in the aforementioned figure and are described in the following paragraphs. 
\end_layout

\begin_layout Subsubsection

Execution Runs
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "execution_runs"

\end_inset

 Execution runs calculate clusterings during their execution and assess qualities for every of those clusterings. Clusterings are calculated by applying clustering methods to datasets using a certain parameter set. That is why execution runs have sets of both, program and data configurations. During execution time every program configuration is applied to every data configuration in a pairwise manner. For every calculated clustering a set of clustering quality measures are assessed.
\end_layout

\begin_layout Standard

In general the options of such a combination of data and program configuration will be taken from these configurations respectively, but can be overridden by the options in the run configuration, That means parameter values defined in the program as well as in the run configuration will be taken from the latter.
\end_layout

\begin_layout Subsubsection

Execution Run Files
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "execution_run_files"

\end_inset

 For execution runs, additionally to the options defined for all runs (see 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
nameref
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

runfiles
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

), the following options for the run-file are defined: 
\end_layout

\begin_layout Description

programConfig: This entry has to be set to a single name or a comma-separated list of names of program configurations. When this run is performed, these program configurations will be pairwise combined with the data configurations given in the option "dataConfig". 
\end_layout

\begin_layout Description

dataConfig: This entry has to be set to a single name or a comma-separated list of names of data configurations. When this run is performed, these data configurations will be pairwise combined with the program configurations given in the option "programConfig". 
\end_layout

\begin_layout Description

qualityMeasures: 
\begin_inset CommandInset label
LatexCommand label
name "subsubsec:runconfigqualmeasure"

\end_inset

 This option determines, which quality measures will be assessed for every clustering calculated during the run process. When this run is a clustering run (see option "mode"), then for every pair of data and program configurations there will be only one clustering as a result for which quality measures will be evaluated. When the mode is set to "parameter_optimization", for every iteration during the parameter optimization process these quality measures will be evaluated. 
\end_layout

\begin_layout Description

[
\begin_inset Formula $<$
\end_inset

programConfigName
\begin_inset Formula $>$
\end_inset

 :] If a dedicated section is found in this run file that is called like one of the program configurations given in option "programConfig", several parameters can be overridden individually only for this program configuration which are 
\end_layout

\begin_deeper
\begin_layout Description


\begin_inset Formula $<$
\end_inset

parameterName
\begin_inset Formula $>$
\end_inset

: The program parameter with the given name which needs to be defined in the program configuration can be fixed to a certain value. 
\end_layout

\end_deeper
\begin_layout Subsubsection

Clustering Runs
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "clustering_runs"

\end_inset

 Clustering runs are a type of execution run, that means they calculate clusterings by applying every program configuration to every data configuration. Afterwards they assess the qualities of those clusterings in terms of several clustering quality measures.
\end_layout

\begin_layout Standard

In the case of clustering runs for every pair of program and data configuration exactly one clustering is calculated and assessed. Clustering runs are visualized in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "clustering_run_process"

\end_inset

.
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Clustering Run Process
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "clustering_run_process"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/framework_flow_singleclustering.png
	width 100line%

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph

Clustering Run File
\end_layout

\begin_layout Standard

For clustering runs, the options are the same as for all execution runs (see 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
nameref
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

executionrunfiles
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

).
\end_layout

\begin_layout Subsubsection

Parameter Optimization Runs
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "paramOpt_runs"

\end_inset

 Parameter optimization runs are a type of execution run, that means they calculate clusterings by applying every program configuration to every data configuration. Afterwards they assess the qualities of those clusterings in terms of several clustering quality measures.
\end_layout

\begin_layout Standard

In contrast to clustering runs, parameter optimization runs calculate several clusterings for every pair of data and program configuration in a pairwise manner. Every clustering corresponds to a certain parameter set and the parameter sets to evaluate are determined by a parameter optimization method (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "paramOptMethods"

\end_inset

 for more information). Parameter optimization runs are visualized in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "paramOpt_run_process"

\end_inset

.
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Parameter Optimization Run Process
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "paramOpt_run_process"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/framework_flow_parameterOptimization.png
	width 100line%

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph

Parameter Optimization Run File
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "paramOpt_run_files"

\end_inset


\end_layout

\begin_layout Standard

For parameter optimization runs, additionally to the options defined for all execution runs (see 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
nameref
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

executionrunfiles
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

), the following options for the run-file are defined: 
\end_layout

\begin_layout Description

optimizationMethod: The parameter optimization method to use when this run is performed. 
\end_layout

\begin_layout Description

optimizationCriterion: The clustering quality measure which should be used as optimization criterion. This criterion is used to determine the optimal parameter set during the optimization process. Therefore it can influence the cause of the optimization process, if the chosen parameter optimization method integrates the qualities of previous iterations into future iterations. 
\end_layout

\begin_layout Description

optimizationIterations: The number of total optimization iterations that should be performed for every pair of program and data configuration. 
\series bold
Hint:
\series default
 This number might not be the number, the optimization process performs in the end, since it gives only a desirable number that might not be accurately realizable for a specific optimization method. 
\end_layout

\begin_layout Description

[
\begin_inset Formula $<$
\end_inset

programConfigName
\begin_inset Formula $>$
\end_inset

 :] If a dedicated section is found in this run file that is called like one of the program configurations given in option "programConfig", several parameters can be overridden individually only for this program configuration which are 
\end_layout

\begin_deeper
\begin_layout Description

optimizationParameters: A comma separated list of the parameters that should be optimized for this program configuration 
\end_layout

\begin_layout Description

optimizationMethod: The parameter optimization method to use for this program configuration 
\end_layout

\end_deeper
\begin_layout Subsubsection

Analysis Runs
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "analysis_runs"

\end_inset

 Analysis runs assess certain properties of objects of interest. An analysis run has a set of target objects and a set of statistics, that should be assessed for each of the target objects. That means, during execution time for every target object every statistic is assessed in a pairwise manner.
\end_layout

\begin_layout Subsubsection

Data Analysis Runs
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "dataAnalysis_runs"

\end_inset

 In case of data analysis runs the target objects to analyze are data configurations (indirectly datasets) and the statistics are data statistics, that is properties of datasets. Data analysis runs are visualized in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "dataAnalysis_run_process"

\end_inset

.
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Data Analysis Run Process
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "dataAnalysis_run_process"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/framework_flow_dataAnalysis.png
	width 100line%

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

Data Analysis Run File
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "dataAnalysis_run_file"

\end_inset


\end_layout

\begin_layout Standard

For data analysis runs the following options for the run-file are defined: 
\end_layout

\begin_layout Description

dataStatistics: A comma separated list of data statistics to assess for the given data configurations. 
\end_layout

\begin_layout Description

dataConfig: A comma separated list of data configurations to analyse. 
\end_layout

\begin_layout Subsubsection

Run Analysis Runs
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "runAnalysis_runs"

\end_inset

 In case of run analysis runs the target objects to analyze are clusterings (results of execution runs) and the statistics are run statistics, that is properties of execution run results. Run analysis runs are visualized in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "runAnalysis_run_process"

\end_inset

.
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Run Analysis Run Process
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "runAnalysis_run_process"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/framework_flow_runAnalysis.png
	width 100line%

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

Run Analysis Run File
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "runAnalysis_run_file"

\end_inset


\end_layout

\begin_layout Standard

For run analysis runs the following options for the run-file are defined: 
\end_layout

\begin_layout Description

runStatistics: A comma separated list of run statistics to assess for the given execution run results. 
\end_layout

\begin_layout Description

uniqeRunIdentifiers: A comma separated list of identifiers of execution run results. See 
\begin_inset CommandInset ref
LatexCommand ref
reference "runresults"

\end_inset

 for an explanation on run result identifiers. 
\end_layout

\begin_layout Subsubsection

Run-Data Analysis Runs
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "runDataAnalysis_runs"

\end_inset

 In case of run-data analysis runs the target objects to analyze are pairs of data configurations and clusterings (results of execution runs) and the statistics are run-data statistics, that is relationships between execution run results and properties of data configurations. Run-Data analysis runs are visualized in figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "runDataAnalysis_run_process"

\end_inset

.
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Run-Data Analysis Run Process
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "runDataAnalysis_run_process"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/framework_flow_runDataAnalysis.png
	width 100line%

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

Run-Data Analysis Run File
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "runDataAnalysis_run_file"

\end_inset


\end_layout

\begin_layout Standard

For run-data analysis runs the following options for the run-file are defined: 
\end_layout

\begin_layout Description

runDataStatistics: A comma separated list of run-data statistics to assess for every pair of given execution run result and data analysis result. 
\end_layout

\begin_layout Description

uniqeRunIdentifiers: A comma separated list of identifiers of execution run results. See 
\begin_inset CommandInset ref
LatexCommand ref
reference "runresults"

\end_inset

 for an explanation on run result identifiers. 
\end_layout

\begin_layout Description

uniqeDataIdentifiers: A comma separated list of identifiers of data analysis run results. See 
\begin_inset CommandInset ref
LatexCommand ref
reference "runresults"

\end_inset

 for an explanation on run result identifiers. 
\end_layout

\begin_layout Subsubsection

Examples of a Run Configurations
\end_layout

\begin_layout Standard

See 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:runconfig1"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:runconfig2"

\end_inset

 for examples of run configuration files.
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig:runconfig1"

\end_inset

 
\begin_inset Caption

\begin_layout Standard

Example run configuration "all_vs_astral_1_171.runconfig" for Parameter Optimization Mode
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

programConfig = APcluster_1,TransClust_2,MCL_1
\end_layout

\begin_layout Plain Layout

dataConfig = astral_1_171
\end_layout

\begin_layout Plain Layout

qualityMeasures = TransClustF2ClusteringQualityMeasure,SilhouetteValueRClusteringQualityMeasure
\end_layout

\begin_layout Plain Layout

mode = parameter_optimization
\end_layout

\begin_layout Plain Layout

optimizationMethod = DivisiveParameterOptimizationMethod
\end_layout

\begin_layout Plain Layout

optimizationCriterion = SilhouetteValueRClusteringQualityMeasure
\end_layout

\begin_layout Plain Layout

optimizationIterations = 1001
\end_layout

\begin_layout Plain Layout


\end_layout

\begin_layout Plain Layout

[TransClust_2]
\end_layout

\begin_layout Plain Layout

optimizationParameters = T
\end_layout

\begin_layout Plain Layout


\end_layout

\begin_layout Plain Layout

[MCL_1]
\end_layout

\begin_layout Plain Layout

optimizationParameters = I
\end_layout

\begin_layout Plain Layout


\end_layout

\begin_layout Plain Layout

[APcluster_1]
\end_layout

\begin_layout Plain Layout

optimizationParameters = preference,dampfact,maxits,convits
\end_layout

\begin_layout Plain Layout

optimizationMethod = APDivisiveParameterOptimizationMethod
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig:runconfig2"

\end_inset

 
\begin_inset Caption

\begin_layout Standard

Example run configuration "mcl_1.runconfig" for Clustering mode
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset listings
inline false
status collapsed

\begin_layout Plain Layout

programConfig = MCL_1
\end_layout

\begin_layout Plain Layout

dataConfig = DS1,test50
\end_layout

\begin_layout Plain Layout


\end_layout

\begin_layout Plain Layout

[MCL_1]
\end_layout

\begin_layout Plain Layout

I = 2.0			
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection

Run Results
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "runresults"

\end_inset


\end_layout

\begin_layout Standard

When a run is performed, a unique run identifier is determined which includes the starttime and date and the name of the run. If the run 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

exampleRun
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 is performed at the 5th of July 2012 at 12:58:38, its unique run identifier is 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

06_05_2012-12_58_38_exampleRun
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 which is also used as the subfolder to store its results in
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reporesults
\end_layout

\end_inset

/06_05_2012-12_58_38_exampleRun
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

Every such folder contains some subfolders. Common to all run types are the following subfolders:
\end_layout

\begin_layout Subsubsection

All run result
\end_layout

\begin_layout Standard

folders contain the following subfolders:
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reporesultconfigs
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Contains the configuration files that are used in this run, which includes all data-, dataset-, goldstandard- and program configurations as well as the run file. 
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reporesultinputs
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Contains backups of all the input files used in this run, which includes all datasets referenced by the data configurations. 
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reporesultgs
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Contains backups of all the goldstandard files used in this run. 
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reporesultlogs
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Contains different log filesm, one for the complete run and one for every iteration performed during the run. 
\end_layout

\begin_layout Standard

Depending on the run type there are additional subfolders:
\end_layout

\begin_layout Subsubsection

Execution run result
\end_layout

\begin_layout Standard

folders additionally contain the following subfolders:
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reporesultcluster
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsubsection

Analysis run result
\end_layout

\begin_layout Standard

folders additionally contain the following subfolders:
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reporesultanalyses
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Section

Backend Client
\end_layout

\begin_layout Standard

The backend client is a small command-line tool which gives commands to the backend server, for example to execute a certain run or terminate a run that is currently executing. It offers tab completion and communicates with the server using the Rserve package via TCP/IP.
\end_layout

\begin_layout Section

Frontend
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_general_frontend"

\end_inset

 The frontend of the framework includes a website and a mysql database, which stores status and results of the backend only for the website. The website in general provides lists of all data and clustering methods available to the framework, as well as tabular and graphical representations of the results.
\end_layout

\begin_layout Section

Frontend Database
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_frontend_db"

\end_inset

 The mysql database of the frontend stores a subset of the data contained in the repository of the backend. The stored information can then be retrieved and visualized by the website.
\end_layout

\begin_layout Subsection

Tables
\end_layout

\begin_layout Standard

In the following we will give a short description of every table of the mysql database. Table names in square brackets correspond to rather technical tables, that are just required by the models of the ruby on rails website and do not have a strong meaning with regard to contents.
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Inheritance of different run types (database hierarchy)
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig_run_inheritance_tables"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/run_inheritance_tables.png
	width 60text%

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

Hint 1
\end_layout

\end_inset

 : All tables that correspond to and are responsible for storing repository objects have a foreign key to the repository table. Thus for every repository object it is known, to which repository it belongs. This is not mentioned in the following descriptions.
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

Hint 2
\end_layout

\end_inset

 : The abbreviation FK means Foreign Key.
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

Hint 3
\end_layout

\end_inset

 : Column names are denoted in italic.
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

Hint 4
\end_layout

\end_inset

 : When a run is performed, certain files are copied into a new result folder. This includes datasets, goldstandards and all configuration files. These files in the result folder are mapped to their original files they correspond to in the original repository. These relationships are stored in the database in a separate column which is named after the table name plus the postfix "_id". For example datasets store this relationship in the column "dataset_id". 
\end_layout

\begin_layout Subsubsection

[aboutus]
\end_layout

\begin_layout Standard

A technical table containing the information regarding the 'About us' section of the website. 
\end_layout

\begin_layout Subsubsection

[admins]
\end_layout

\begin_layout Standard

A technical table containing the information regarding the 'Admin' section of the website. 
\end_layout

\begin_layout Subsubsection

cluster_objects
\end_layout

\begin_layout Standard

Every clustering contains clusters, which again contain cluster objects. This table stores all cluster objects with their 
\shape italic
name
\shape default
 and knows, to which cluster they belong (
\shape italic
cluster_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

clustering_quality_measure_optimums
\end_layout

\begin_layout Standard

For visualization and interpretation of results the website needs to know, whether a certain clustering quality measure is optimal when min- or maximized. This table maps every measure to 'Minimum' or 'Maximum' (
\shape italic
name
\shape default
).
\end_layout

\begin_layout Subsubsection

clustering_quality_measures 
\end_layout

\begin_layout Standard

This table keeps track of all the clustering quality measures available in the framework. For every measure it stores its 
\shape italic
name
\shape default
, minimal and maximal value (
\shape italic
minValue
\shape default
 and 
\shape italic
maxValue
\shape default
) and whether the measure requires a goldstandard (
\shape italic
requiresGoldStandard
\shape default
). On the website every clustering quality measure has a readable alias. This alias is stored in the column (
\shape italic
alias
\shape default
).
\end_layout

\begin_layout Subsubsection

clusterings 
\end_layout

\begin_layout Standard

This table holds all the clusterings that were calculated and are stored in the repository. Every parsed clustering corresponds to a file in the repository, for which we store its absolute path (
\shape italic
absPath
\shape default
).
\end_layout

\begin_layout Subsubsection

clusters 
\end_layout

\begin_layout Standard

Every clustering has clusters. This table holds all clusters and maps them to their corresponding clustering. Every cluster has a 
\shape italic
name
\shape default
.
\end_layout

\begin_layout Subsubsection

data_configs 
\end_layout

\begin_layout Standard

A table holding all data configurations. Every data configuration has an absolute path (
\shape italic
absPath
\shape default
), a 
\shape italic
name
\shape default
, a corresponding dataset configuration (
\shape italic
dataset_config_id
\shape default
, FK) and a goldstandard configuration (
\shape italic
goldstandard_config_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

dataset_configs 
\end_layout

\begin_layout Standard

A table holding all dataset configurations. Every dataset configuration has an absolute path (
\shape italic
absPath
\shape default
), a 
\shape italic
name
\shape default
 and a corresponding dataset (
\shape italic
dataset_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

dataset_formats 
\end_layout

\begin_layout Standard

A table holding all dataset formats. Every format has a 
\shape italic
name
\shape default
 and an 
\shape italic
alias
\shape default
.
\end_layout

\begin_layout Subsubsection

dataset_types 
\end_layout

\begin_layout Standard

This table holds all types of datasets. For every dataset type it stores a 
\shape italic
name
\shape default
. On the website every dataset type has a readable alias. For every dataset type this table stores the 
\shape italic
alias
\shape default
.
\end_layout

\begin_layout Subsubsection

datasets 
\end_layout

\begin_layout Standard

This table holds all datasets. For every dataset its absolute path (
\shape italic
absPath
\shape default
), 
\shape italic
checksum
\shape default
, format (
\shape italic
dataset_format_id
\shape default
, FK) and type (
\shape italic
dataset_type_id
\shape default
, FK) is stored.
\end_layout

\begin_layout Subsubsection

goldstandard_configs 
\end_layout

\begin_layout Standard

This table holds all goldstandard configurations. For every goldstandard configuration its absolute path (
\shape italic
absPath
\shape default
), 
\shape italic
name
\shape default
 and corresponding goldstandard (
\shape italic
goldstandard_id
\shape default
, FK) is stored.
\end_layout

\begin_layout Subsubsection

goldstandards
\end_layout

\begin_layout Standard

This table holds all goldstandards. For every goldstandard its absolute path (
\shape italic
absPath
\shape default
), and the corresponding goldstandard (
\shape italic
goldstandard_id
\shape default
, FK) is stored.
\end_layout

\begin_layout Subsubsection

[helps]
\end_layout

\begin_layout Standard

A technical table containing the information regarding the 'Help' section of the website.
\end_layout

\begin_layout Subsubsection

[mains]
\end_layout

\begin_layout Standard

A technical table containing the information regarding the startpage of the website.
\end_layout

\begin_layout Subsubsection

optimizable_program_parameters 
\end_layout

\begin_layout Standard

This table stores the program parameters (
\shape italic
program_parameter_id
\shape default
, FK) of a program configuration (
\shape italic
program_config_id
\shape default
, FK), that can be optimized.
\end_layout

\begin_layout Subsubsection

parameter_optimization_methods
\end_layout

\begin_layout Standard

This table stores all available parameter optimization methods (
\shape italic
name
\shape default
) registered in a repository (
\shape italic
repository_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

program_configs 
\end_layout

\begin_layout Standard

All program configurations registered in a repository are stored in this table. Every program configuration has a 
\shape italic
name
\shape default
, an absolute path (
\shape italic
absPath
\shape default
), different invocation formats for different scenarios (
\shape italic
invocationFormat
\shape default
, 
\shape italic
invocationFormatWithoutGoldStandard
\shape default
, 
\shape italic
invocationFormatParameterOptimization
\shape default
, 
\shape italic
invocationFormatParameterOptimizationWithoutGoldStandard
\shape default
) and a boolean whether the program expects input with normalized similiarites (
\shape italic
expectsNormalizedDataSet
\shape default
). For every program configuration we store the corresponding repository (
\shape italic
repository_id
\shape default
, FK), the program (
\shape italic
program_id
\shape default
, FK) this configuration belongs to, the run result format (
\shape italic
run_result_format_id
\shape default
, FK) of the program using this configuration.
\end_layout

\begin_layout Subsubsection

program_configs_compatible_dataset_formats 
\end_layout

\begin_layout Standard

Every program configuration (
\shape italic
program_config_id
\shape default
, FK) has a set of compatible dataset formats (
\shape italic
dataset_format_id
\shape default
, FK), which the program will understand when it is executed using this configuration.
\end_layout

\begin_layout Subsubsection

[program_descriptions]
\end_layout

\begin_layout Standard

This table stores descriptions of clustering methods, for when they are shown on the website.
\end_layout

\begin_layout Subsubsection

[program_images]
\end_layout

\begin_layout Standard

When this table contains an image for a clustering method, it will be shown on the website.
\end_layout

\begin_layout Subsubsection

program_parameter_types
\end_layout

\begin_layout Standard

This table contains the names (
\shape italic
name
\shape default
) of the different possible program parameter types (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_programconfigs"

\end_inset

 for more information on the types of parameters supported by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

).
\end_layout

\begin_layout Subsubsection

program_parameters
\end_layout

\begin_layout Standard

This table stores the program parameters defined in a program configuration (
\shape italic
program_config_id
\shape default
, FK). Every program parameter has a type (
\shape italic
program_parameter_type_id
\shape default
, FK), a 
\shape italic
name
\shape default
, an (optional) 
\shape italic
description
\shape default
, a 
\shape italic
minValue
\shape default
, a 
\shape italic
maxValue
\shape default
 and a default value (
\shape italic
def
\shape default
).
\end_layout

\begin_layout Subsubsection

[program_publications]
\end_layout

\begin_layout Standard

When this table contains publication information for a clustering method, it will be shown on the website.
\end_layout

\begin_layout Subsubsection

programs
\end_layout

\begin_layout Standard

This tables stores all clustering methods together with their 
\shape italic
absPath
\shape default
 and an 
\shape italic
alias
\shape default
, which is used to represent this clustering method on the website.
\end_layout

\begin_layout Subsubsection

repositories
\end_layout

\begin_layout Standard

The repositories that are using this database to store their results. Every repository has a absolute base directory (
\shape italic
basePath
\shape default
) and a type (
\shape italic
repository_type_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

repository_types
\end_layout

\begin_layout Standard

The types that repositories can have. Every type has a 
\shape italic
name
\shape default
. Check out 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_repository"

\end_inset

 for more information on which repository types exist.
\end_layout

\begin_layout Subsubsection

run_analyses
\end_layout

\begin_layout Standard

This table holds all analysis runs. Every analysis run is also a run (
\shape italic
run_id
\shape default
, FK).
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Foreign keys of analysis runs
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig_analysis_runs_foreign_keys"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/db_analysis_runs.png
	scale 40

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

run_analysis_statistics
\end_layout

\begin_layout Standard

Every analysis run (
\shape italic
run_analysis_id
\shape default
, FK) evaluates certain statistics (
\shape italic
statistic_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_clusterings
\end_layout

\begin_layout Standard

This table holds all clustering runs. Every clustering run is also a execution run (
\shape italic
run_execution_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_data_analyses
\end_layout

\begin_layout Standard

This table holds all data analysis runs. Every data analysis run is also an analysis run (
\shape italic
run_analysis_id
\shape default
, FK).
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Foreign keys of data analysis runs
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig_data_analysis_runs_foreign_keys"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/db_data_analysis_runs.png
	scale 40

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

run_data_analysis_data_configs
\end_layout

\begin_layout Standard

Every data analysis run analysis a set of data configurations wrapping datasets. This table holds the data configurations (
\shape italic
data_config_id
\shape default
, FK) that a certain data analysis run (run_data_analysis_id, FK) analyses.
\end_layout

\begin_layout Subsubsection

run_execution_data_configs
\end_layout

\begin_layout Standard

An execution run applies program configurations to data configurations. This table stores the data configurations (
\shape italic
data_config_id
\shape default
, FK) belonging to execution runs (
\shape italic
run_execution_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_execution_parameter_values
\end_layout

\begin_layout Standard

An execution run can specify values for program parameters. This table stores for every execution run (
\shape italic
run_execution_id
\shape default
, FK), program configuration (
\shape italic
program_config_id
\shape default
, FK) and program parameter (
\shape italic
program_parameter_id
\shape default
, FK) the specified 
\shape italic
value
\shape default
.
\end_layout

\begin_layout Subsubsection

run_execution_program_configs
\end_layout

\begin_layout Standard

An execution run applies program configurations to data configurations. This table stores the program configurations (
\shape italic
program_config_id
\shape default
, FK) belonging to execution runs (
\shape italic
run_execution_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_execution_quality_measures
\end_layout

\begin_layout Standard

An execution run applies clustering methods to datasets and assesses clustering quality measures. This table stores the execution run (run_execution_id, FK) together with the clustering quality measures (
\shape italic
clustering_quality_measure_id
\shape default
, FK) to assess.
\end_layout

\begin_layout Subsubsection

run_executions
\end_layout

\begin_layout Standard

This table holds all execution runs. Every execution run is also a run (
\shape italic
run_id
\shape default
, FK).
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Foreign keys of execution runs
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig_execution_runs_foreign_keys"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/db_execution_runs.png
	scale 40

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

run_internal_parameter_optimizations
\end_layout

\begin_layout Standard

This table holds all internal parameter optimization runs. Every such run is also an execution run (
\shape italic
run_execution_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_parameter_optimization_methods
\end_layout

\begin_layout Standard

A parameter optimization run uses parameter optimization methods to optimize parameters. For a certain parameter optimization run (
\shape italic
run_parameter_optimization_id
\shape default
, FK) for every program configuration (
\shape italic
program_config_id
\shape default
, FK) a different parameter optimization method (
\shape italic
parameter_optimization_method_id
\shape default
, FK) and a clustering quality measure to optimize can be specified.
\end_layout

\begin_layout Subsubsection

run_parameter_optimization_parameters
\end_layout

\begin_layout Standard

A parameter optimization run optimizes parameters of clustering methods. This table stores for a certain run (
\shape italic
run_parameter_optimization_id
\shape default
, FK) for every program configuration contained (
\shape italic
program_config_id
\shape default
, FK) the parameters (
\shape italic
program_parameter_id
\shape default
, FK) to optimize.
\end_layout

\begin_layout Subsubsection

run_parameter_optimization_quality_measures
\end_layout

\begin_layout Standard

A parameter optimization run optimizes parameters by maximizing or minimizing clustering quality measures. This table stores all clustering quality measures (
\shape italic
clustering_quality_measure_id
\shape default
, FK) to assess for the calculated clusterings.
\end_layout

\begin_layout Subsubsection

run_parameter_optimizations
\end_layout

\begin_layout Standard

This table holds all parameter optimization runs. Every parameter optimization run is also an execution run (
\shape italic
run_execution_id
\shape default
, FK).
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Foreign keys of parameter optimization runs
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig_parameter_optimization_runs_foreign_keys"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/db_parameter_optimization_runs.png
	scale 40

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

run_result_data_analysis_data_configs_statistics
\end_layout

\begin_layout Standard

A data analysis run assesses statistics for certain data configurations. This table stores the assessed statistics (
\shape italic
statistic_id
\shape default
, FK) for every run result (
\shape italic
run_result_id
\shape default
, FK) generated by a
\end_layout

\begin_layout Subsubsection

run_result_formats
\end_layout

\begin_layout Standard

This table holds all run result formats. Every run result format has a 
\shape italic
name
\shape default
.
\end_layout

\begin_layout Subsubsection

run_results
\end_layout

\begin_layout Standard

When a run is executed, it produces a unique folder in the results directory of the repository. These folders are stored in this table together with the type of the corresponding run (
\shape italic
run_id
\shape default
, FK) that created this result (
\shape italic
run_type_id
\shape default
, FK), an absolute path to the results folder (
\shape italic
absPath
\shape default
), the 
\shape italic
uniqueRunIdentifier
\shape default
 of this run result (which corresponds to the name of the folder) and the 
\shape italic
date
\shape default
 the run result was created.
\end_layout

\begin_layout Subsubsection

run_results_analyses
\end_layout

\begin_layout Standard

When an analysis run is executed, it produces a unique folder in the results directory of the repository. Every analysis run result is also a run result (
\shape italic
run_result_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_results_clusterings
\end_layout

\begin_layout Standard

When a clustering run is executed, it produces a unique folder in the results directory of the repository. Every clustering run result is also an execution run result (
\shape italic
run_results_execution_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_results_data_analyses
\end_layout

\begin_layout Standard

When a data analysis run is executed, it produces a unique folder in the results directory of the repository. Every data analysis run result is also an analysis run result (
\shape italic
run_results_analysis_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_results_executions
\end_layout

\begin_layout Standard

When an execution run is executed, it produces a unique folder in the results directory of the repository. Every execution run result is also a run result (
\shape italic
run_result_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_results_internal_parameter_optimizations
\end_layout

\begin_layout Standard

When an internal parameter optimization run is executed, it produces a unique folder in the results directory of the repository. Every internal parameter optimization run result is also an execution run result (
\shape italic
run_results_execution_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_results_parameter_optimizations
\end_layout

\begin_layout Standard

When a parameter optimization run is executed, it produces a set of iterative run results, that are all summarized in .complete-files for every pair of program and data configuration (
\shape italic
program_config_id
\shape default
, FK) and (
\shape italic
data_config_id
\shape default
, FK). Every parameter optimization run result is also an execution run result (
\shape italic
run_results_execution_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_results_parameter_optimizations_parameter_set_iterations
\end_layout

\begin_layout Standard

Every parameter optimization produces clustering results for a set of iterations. In each iteration a different parameter set (
\shape italic
run_results_parameter_optimizations_parameter_set_id
\shape default
, FK) is evaluated. This table holds the number of the 
\shape italic
iteration
\shape default
, together with the parameter set, the produced clustering (
\shape italic
clustering_id
\shape default
, FK) and the parameter set in a string representation (
\shape italic
paramSetAsString
\shape default
).
\end_layout

\begin_layout Subsubsection

run_results_parameter_optimizations_parameter_set_parameters
\end_layout

\begin_layout Standard

This table holds the program parameters (
\shape italic
program_parameter_id
\shape default
, FK) that belong to parameter sets (
\shape italic
run_results_parameter_optimizations_parameter_set_id
\shape default
, FK) contained in a parameter optimization run result (
\shape italic
run_results_parameter_optimization_id
\shape default
, FK), evaluated by the framework.
\end_layout

\begin_layout Subsubsection

run_results_parameter_optimizations_parameter_sets
\end_layout

\begin_layout Standard

This table holds the parameter sets evaluated during a parameter optimization run and contained in a parameter optimization run result (
\shape italic
run_results_parameter_optimization_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_results_parameter_optimizations_parameter_values
\end_layout

\begin_layout Standard

This table contains the 
\shape italic
value
\shape default
 of a certain program parameter (
\shape italic
run_results_parameter_optimizations_parameter_set_parameter_id
\shape default
, FK) evaluated in a certain parameter optimization iteration (
\shape italic
run_results_parameter_optimizations_parameter_set_iteration_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_results_parameter_optimizations_qualities
\end_layout

\begin_layout Standard

In every iteration of a parameter optimization a parameter set is evaluated and clustering qualities are assessed. This table holds the clustering quality measure (
\shape italic
cluster_quality_measure_id
\shape default
, FK) together with the assessed 
\shape italic
quality
\shape default
.
\end_layout

\begin_layout Subsubsection

run_results_run_analyses
\end_layout

\begin_layout Standard

When a run analysis run is executed, it produces a unique folder in the results directory of the repository. Every run analysis run result is also an analysis run result (
\shape italic
run_results_analysis_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_results_run_data_analyses
\end_layout

\begin_layout Standard

When a run-data analysis run is executed, it produces a unique folder in the results directory of the repository. Every run-data analysis run result is also an analysis run result (
\shape italic
run_results_analysis_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

run_run_analyses
\end_layout

\begin_layout Standard

This table holds all run analysis runs. Every run analysis run is also an analysis run (
\shape italic
run_analysis_id
\shape default
, FK).
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Foreign keys of run analysis runs
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig_run_analysis_runs_foreign_keys"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/db_run_analysis_runs.png
	scale 40

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

run_run_analysis_run_identifiers
\end_layout

\begin_layout Standard

Every run analysis run analyses (
\shape italic
run_run_analysis_id
\shape default
, FK) a set of run results with certain identifiers (
\shape italic
runIdentifier
\shape default
).
\end_layout

\begin_layout Subsubsection

run_run_data_analyses
\end_layout

\begin_layout Standard

This table holds all run-data analysis runs. Every run-data analysis run is also an analysis run (
\shape italic
run_analysis_id
\shape default
, FK).
\end_layout

\begin_layout Standard


\begin_inset Float figure
placement hbtp
wide false
sideways false
status open


\begin_layout Standard


\begin_inset Caption

\begin_layout Standard

Foreign keys of run-data analysis runs
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "fig_run_data_analysis_runs_foreign_keys"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
centering
\end_layout

\end_inset

 
\begin_inset Graphics 
	filename ../master_seminar_presentation/db_run_data_analysis_runs.png
	scale 40

\end_inset

 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

run_run_data_analysis_data_identifiers
\end_layout

\begin_layout Standard

Every run-data analysis run analyzes (
\shape italic
run_run_analysis_id
\shape default
, FK) a set of data analysis run results with certain identifiers (
\shape italic
dataIdentifier
\shape default
).
\end_layout

\begin_layout Subsubsection

run_run_data_analysis_run_identifiers
\end_layout

\begin_layout Standard

Every run-data analysis run analyzes (
\shape italic
run_run_analysis_id
\shape default
, FK) a set of execution run results with certain identifiers (
\shape italic
runIdentifier
\shape default
).
\end_layout

\begin_layout Subsubsection

run_types
\end_layout

\begin_layout Standard

This table holds all types of runs. Every type has a 
\shape italic
name
\shape default
. Check out 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig_run_inheritance"

\end_inset

 for more information on which run types exist.
\end_layout

\begin_layout Subsubsection

runs
\end_layout

\begin_layout Standard

This table holds all runs. Every run has a type (
\shape italic
run_type_id
\shape default
, FK), an absolute path (
\shape italic
absPath
\shape default
), a 
\shape italic
name
\shape default
 and a 
\shape italic
status
\shape default
.
\end_layout

\begin_layout Subsubsection

[schema_migrations]
\end_layout

\begin_layout Standard

This table holds all the migrations of the ruby on rails website.
\end_layout

\begin_layout Subsubsection

statistics
\end_layout

\begin_layout Standard

This table holds all the statistics registered in a repository. Every statistic has a 
\shape italic
name
\shape default
 and an 
\shape italic
alias
\shape default
. The alias is used on the website as a readable name.
\end_layout

\begin_layout Subsubsection

statistics_datas
\end_layout

\begin_layout Standard

This table holds all the data statistics. Every data statistic is also a statistic (
\shape italic
statistic_id
\shape default
, FK). 
\end_layout

\begin_layout Subsubsection

statistics_runs
\end_layout

\begin_layout Standard

This table holds all the run statistics. Every run statistic is also a statistic (
\shape italic
statistic_id
\shape default
, FK). 
\end_layout

\begin_layout Subsubsection

statistics_run_datas
\end_layout

\begin_layout Standard

This table holds all the run-data statistics. Every run-data statistic is also a statistic (
\shape italic
statistic_id
\shape default
, FK).
\end_layout

\begin_layout Subsubsection

[submit_datasets]
\end_layout

\begin_layout Standard

This table corresponds to the section "Submit Dataset" of the website. 
\end_layout

\begin_layout Subsubsection

[submit_methods]
\end_layout

\begin_layout Standard

This table corresponds to the section "Submit Clustering Method" of the website. 
\end_layout

\begin_layout Subsubsection

[submits]
\end_layout

\begin_layout Standard

This table corresponds to the "Submit" section of the website. 
\end_layout

\begin_layout Subsubsection

[users]
\end_layout

\begin_layout Standard

This table holds all the users, that have registered on the website. 
\end_layout

\begin_layout Section

Frontend Website
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_frontend_website"

\end_inset

 
\end_layout

\begin_layout Subsection

Navigation
\end_layout

\begin_layout Subsubsection

Welcome
\end_layout

\begin_layout Subsubsection

Overview
\end_layout

\begin_layout Subsubsection

Clustering Methods
\end_layout

\begin_layout Subsubsection

Datasets
\end_layout

\begin_layout Subsubsection

Measures
\end_layout

\begin_layout Subsubsection

Submit
\end_layout

\begin_layout Subsubsection

Admin
\end_layout

\begin_layout Subsubsection

Help
\end_layout

\begin_layout Subsubsection

About us
\end_layout

\begin_layout Subsection

Comparing Clustering Methods
\end_layout

\begin_layout Subsection

Comparing Datasets
\end_layout

\begin_layout Subsection

Clustering Run Results
\end_layout

\begin_layout Subsection

Parameter Optimization Run Results
\end_layout

\begin_layout Subsection

Internal Parameter Optimization Run Results
\end_layout

\begin_layout Subsection

Data Analysis Run Results
\end_layout

\begin_layout Subsection

Run Analysis Run Results
\end_layout

\begin_layout Subsection

Run-Data Analysis Run Results
\end_layout

\begin_layout Section

Download & Installation
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "sec_inst"

\end_inset

 There are basically two options how to get a working installation of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

. The easy way is to download our VirtualBox Image and start the virtual machine. The image contains both, the website and the backend server- and client executables. This procedure is explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_vbox_image"

\end_inset

. The second option is to install the framework manually step-by-step. The requirements of the backend and its installation are explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "backend_requirements"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "install_backend"

\end_inset

. respectively. The requirements of the frontend and its installation are detailed in 
\begin_inset CommandInset ref
LatexCommand ref
reference "frontend_requirements"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "install_frontend"

\end_inset

 . 
\end_layout

\begin_layout Subsection

VirtualBox Image
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_vbox_image"

\end_inset

 The first option how to get a running 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 is to download the VirtualBox from our server, start the machine and have everything installed right from the start. You can then access the frontend website in the webbrowser, start the backend server and client and produce your first clustering results. You do not have to install any unmet requirements or do any configurations. Here is how: 
\end_layout

\begin_layout Enumerate

Install VirtualBox 
\end_layout

\begin_layout Enumerate

Download the VirtualBox disk image from our 
\begin_inset CommandInset href
LatexCommand href
name "server"
target "\vboxImage"

\end_inset

and start the machine 
\end_layout

\begin_layout Enumerate

The backend server can be found under
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset Flex Flex:URL
status collapsed

\begin_layout Plain Layout


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vboxServer
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate

The backend client is located under
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset Flex Flex:URL
status collapsed

\begin_layout Plain Layout


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vboxClient
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate

To access the frontend website, open up the preinstalled webbrowser and open the address
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset Flex Flex:URL
status collapsed

\begin_layout Plain Layout


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vboxFrontend
\end_layout

\end_inset


\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Subsection

Manual Installation
\end_layout

\begin_layout Standard

To get 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 running on your own server, you have to install it manually. The following sections will show you, what requirements have to be met for each component of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 (backend server, client and frontend website, database) and how these components can be installed.
\end_layout

\begin_layout Subsection

Backend Requirements
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "backend_requirements"

\end_inset

 The backend (including server and client component) uses several java libraries that already ship within the corresponding binaries (jar-files). They have to be available within the class path of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 when it is started.
\end_layout

\begin_layout Standard

Additionally many functions of the backend server require a working R installation (version 
\begin_inset Formula $\geq$
\end_inset

 2.15) together with an installed Rserve library within R. In principle the clustering processes of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 can be started 
\series bold
without
\series default
 a running 
\series bold
Rserve
\series default
, but you will not be able to use any functions depending on R. Throughout this manual, functionalities which require R will be labeled with 
\begin_inset Formula $^{(Rserve)}$
\end_inset

.
\end_layout

\begin_layout Subsubsection

Java 
\begin_inset Formula $\geq$
\end_inset

 1.6
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 is completely written in Java and requires a JRE 
\begin_inset Formula $\geq$
\end_inset

 1.6 on the target system. 
\end_layout

\begin_layout Subsubsection

Java libraries
\end_layout

\begin_layout Standard

The following Java libraries have to be accessible within the classpath when 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 is started. The versions in brackets are the versions, that are by default shipped with the framework. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 has been tested together with these versions, so we cannot guarantee functionality, when different versions are used.
\end_layout

\begin_layout Paragraph

Apache Commons CLI (1.2)
\end_layout

\begin_layout Standard

is a library for parsing command line arguments and printing CLI usage 
\end_layout

\begin_layout Paragraph

Apache Commons Configuration (1.8)
\end_layout

\begin_layout Standard

provides classes and parsers for configuration files 
\end_layout

\begin_layout Paragraph

Apache Commons IO (2.3)
\end_layout

\begin_layout Standard

provides file operations like copying and moving 
\end_layout

\begin_layout Paragraph

Apache Commons Lang (2.6 & 3.1)
\end_layout

\begin_layout Standard

Base library of apache commons 
\end_layout

\begin_layout Paragraph

Apache Commons Logging (1.1.1)
\end_layout

\begin_layout Standard

is a library used by other apache commons libraries for logging 
\end_layout

\begin_layout Paragraph

JAnsi (1.9)
\end_layout

\begin_layout Standard

provides ANSI codes on the console output 
\end_layout

\begin_layout Paragraph

JLine (2.8 Snapshot)
\end_layout

\begin_layout Standard

a library for command line tab completion 
\end_layout

\begin_layout Paragraph

JUnit
\end_layout

\begin_layout Standard

provides classes for testing and validation 
\end_layout

\begin_layout Paragraph

JUnit Addons (1.4)
\end_layout

\begin_layout Standard

an extension library of JUnit 
\end_layout

\begin_layout Paragraph

log4j (1.2.16)
\end_layout

\begin_layout Standard

an logging API for Java 
\end_layout

\begin_layout Paragraph

Logback (1.0.9)
\end_layout

\begin_layout Standard

a logging library based on log4j 
\end_layout

\begin_layout Paragraph

Parallel Colt (0.9.4)
\end_layout

\begin_layout Standard

a library for fast and memory efficient methods and data structures is used by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 to store data matrices of datasets 
\end_layout

\begin_layout Paragraph

MySQL Connector Java (5.1.21)
\end_layout

\begin_layout Standard

enables Java to communicate with MySQL databases 
\end_layout

\begin_layout Paragraph

Rserve (1.7)
\end_layout

\begin_layout Standard

libraries providing possibilities to use the R framework from within Java classes 
\end_layout

\begin_layout Paragraph

TransClust (1.0)
\end_layout

\begin_layout Standard

a clustering method, is used as a library to parse and convert FASTA and BLAST files 
\end_layout

\begin_layout Paragraph

Wiutils (1.0)
\end_layout

\begin_layout Standard

a java library providing several general-purpose functionalities and classes, mostly inspired by R convenience functions 
\end_layout

\begin_layout Subsubsection

[R installation (
\begin_inset Formula $\geq$
\end_inset

 2.15)]
\end_layout

\begin_layout Standard

R-depending components introduced into 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 can make use of functions of arbitrary R packages. R is in principle optional, but then those functions will not be available. Only subclasses of the following classes are by design intended to make use of R: 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.cluster.quality.ClusteringQualityMeasure
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.data.distance.DistanceMeasure
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.data.generator.DataSetGenerator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.program.r.RProgram
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.cluster.paramOptimization.ParameterOptimizationMethod
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.data.statistics.DataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.run.statistics.RunStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.run.statistics.RunDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Standard

Subclasses of these classes need to tell the framework which R packages they require. The corresponding class is only loaded, if these R packages are available.
\end_layout

\begin_layout Standard

R is available for Unix, MacOS and Windows systems and can be downloaded from 
\begin_inset Flex Flex:URL
status collapsed

\begin_layout Plain Layout

http://cran.r-project.org/
\end_layout

\end_inset

. The Rserve package requires a R version 
\begin_inset Formula $\geq$
\end_inset

 2.15. Some systems (e.g. Debian 6) do not have these R versions in their default repositories. In these cases you can download the binaries from the official website and install them manually. If you are on a Debian system, you can add the CRAN repositories to your aptitude package system and install it via console. For Debian 6 this can be achieved by doing the following steps:
\end_layout

\begin_layout Enumerate

Append the aptitude repository to your sources.list
\end_layout

\begin_deeper
\begin_layout Standard

e.g. 'deb http://cran.cnr.berkeley.edu/bin/linux/debian squeeze-cran/' 
\end_layout

\end_deeper
\begin_layout Enumerate

Update your local aptitude package information
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

apt-get update
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize

If the update fails with an error, that you have not authenticated the new server, you have to import the public key of the server with the following command
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

gpg --keyserver subkeys.pgp.net --recv-keys <serverId>
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

In case of the above example CRAN repository server:
\end_layout

\begin_layout Standard


\family typewriter
<serverId> = 06F90DE5381BA480
\family default

\end_layout

\end_deeper
\begin_layout Itemize

Then you will have to add the imported public key of the server to the authorized server keys of aptitude
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

gpg -a --export <serverId> | sudo apt-key add -
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Itemize

Rerun 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

apt get update
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate

Install the R framework by executing
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

apt-get install r-base
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard

If you are not familiar with R but are interested in some more information about it, you can also find good documentations on the aforementioned website. 
\end_layout

\begin_layout Paragraph

Rserve package
\end_layout

\begin_layout Standard

Rserve acts as a distribution server to make R available via TCP/IP. Different interfaces are provided for Rserve, such that R can be used from within other programs written in different programming languages, for example Java. This functionality is exploited by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 in that statistical calculations are outsourced to existing R implementations instead of implementing them from scratch in Java.
\end_layout

\begin_layout Standard

This is used in several components of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

, which are listed below. In principle the clustering processes of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 can be started without R or a running Rserve instance, but you will not be able to use any functions depending on R.
\end_layout

\begin_layout Subparagraph

Installation
\end_layout

\begin_layout Standard

To install the Rserve package in your R installation, open your R console. On Unix systems you type R in your console and a R terminal will open up:
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

R
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

Now you can install the Rserve package using the following command:
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

install.packages("Rserve")
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

After you have installed the Rserve package in R, you have to start an instance of Rserve, which will listen on a specific port for incoming calls.
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

Rserve()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

In our case these calls will origin from the backend server, which connects to Rserve. This happens without further intervention by the user.
\end_layout

\begin_layout Paragraph

R libraries
\end_layout

\begin_layout Standard

Several components that ship with 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 require certain R packages. If you want to use the depending components, you will have to install these packages using the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

install.packages("<packageName>")
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 command.
\end_layout

\begin_layout Subparagraph

"cluster"
\end_layout

\begin_layout Standard

is required by 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

GapStatisticParameterOptimizationMethod
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

SilhouetteValueRClusteringQualityMeasure
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Subparagraph

"fields"
\end_layout

\begin_layout Standard

is required by 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

HopkinsDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Subparagraph

"Hmisc"
\end_layout

\begin_layout Standard

is required by 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

HoeffdingDRDistanceMeasure
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

PearsonCorrelationRDistanceMeasure
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

SpearmanCorrelationRDistanceMeasure
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Subparagraph

"igraph"
\end_layout

\begin_layout Standard

is required by 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

GraphMinCutRDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

GraphDiversityAverageRDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

GraphDensityRDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

GraphCohesionRDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

GraphAdhesionRDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

ClusteringCoefficientRDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

ClusteringCoefficientRDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Subparagraph

"kernlab"
\end_layout

\begin_layout Standard

is required by 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

SpectralClusteringRProgram
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Subparagraph

"lattice"
\end_layout

\begin_layout Standard

is required by 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

CooccurrenceBestRunStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

CooccurrenceRunStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Subparagraph

"MASS"
\end_layout

\begin_layout Standard

is required by 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

LinearModelRidgeRunDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Subparagraph

"mlbench"
\end_layout

\begin_layout Standard

is required by 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

CassiniDataSetGenerator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

CircleDataSetGenerator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

CuboidDataSetGenerator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

Gaussian2DDataSetGenerator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

HyperCubeCornersDataSetGenerator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

RingnormDataSetGenerator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

SimplexCornersDataSetGenerator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

SpiralsDataSetGenerator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Subparagraph

"stats"
\end_layout

\begin_layout Standard

is required by 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

HierarchicalClusteringRProgram
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Itemize


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

KMeansClusteringRProgram
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\begin_layout Subsection

Backend Installation
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "install_backend"

\end_inset

 In the following we provide a step by step installation manual for Debian 6 servers. We expect the aforementioned requirements to be installed and fulfilled including a Java and R installation. 
\end_layout

\begin_layout Itemize

Download server and client executables from 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "\urlserver"

\end_inset

and 
\begin_inset CommandInset href
LatexCommand href
name "here"
target "\urlclient"

\end_inset

. 
\end_layout

\begin_layout Itemize

Execute backend server by typing
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

java -jar clustevalServer.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

This will start the backend server with default options, listening on port 1099 for clients and using the folder repository in the current directory as repository root. The repository root is recreated, if it does not exist. If it does exist, everything will be loaded and parsed only from this directory (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_repository"

\end_inset

 for more information on Repositories).
\end_layout

\begin_layout Standard

For help on available command line parameters you can check out 
\begin_inset CommandInset ref
LatexCommand ref
reference "backend_server_cli"

\end_inset

 or invoke the backend server with the help parameter:
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

java -jar clustevalServer.jar -help
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Subsection

Frontend Requirements
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "frontend_requirements"

\end_inset

 The frontend requires a MySQL installation together with a database, that has all necessary tables in it. The backend server has to be configured to use this database and fill it with all relevant data contained in the backend repository. The website itself is based on Ruby on Rails and therefore requires an installation of Ruby on Rails.
\end_layout

\begin_layout Standard

Throughout development and for testing as well as validation we used MySQL 5.1 and RoR 1.9.1. For other versions we cannot guarantee the website behaving correctly.
\end_layout

\begin_layout Subsubsection

MySQL (5.1)
\end_layout

\begin_layout Standard

If the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 frontend website is to be used, the MySQL database is required to store and retrieve all the data visualized on the website. This data in turn is inserted into the database by the backend server. To install MySQL under Debian 6, you can type
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

sudo apt-get install mysql-server
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

During the installation procedure this will ask you for a root password, and the credentials of a non-root user. We assume these to be 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

clustEvalRead
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

We can only ensure full compatibility of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 with the version of MySQL that is indicated in brackets.
\end_layout

\begin_layout Paragraph

Database & User setup
\end_layout

\begin_layout Standard

The website will require a database and a user with read-rights for that database. It is 
\series bold
highly discouraged
\series default
 to use the 
\series bold
root user
\series default
 or any other user with write-rights for this purpose. In case the website contains potential security holes, this can lead to misuse and damage to the MySQL database. If the website uses a user with read-rights, this cannot happen. To create a mysql database, open up a MySQL terminal by typing
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

mysql -u <YOUR_USERNAME> -p
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

this will ask you for your password. To create a database, perform the following command
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

mysql> CREATE DATABASE <DB_NAME>;
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

Now we create the user which will be used by the website to access the database.
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

mysql> CREATE USER 'clustEvalRead'@'localhost' IDENTIFIED BY '<YOUR_PASSWORD>';
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

We grant our user the right, to select from the database and to show views.
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

mysql> GRANT SELECT ON <DB_NAME>.* TO clustEvalRead;
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

mysql> GRANT SHOW VIEW ON <DB_NAME>.* TO clustEvalRead;
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

Ruby on Rails (1.9.1)
\end_layout

\begin_layout Standard

The frontend website is developed in Ruby on Rails. Therefore the website requires several components on the target machine: 
\end_layout

\begin_layout Itemize

Ruby, the programming language 
\end_layout

\begin_layout Itemize

a webserver compatible to Ruby on Rails 
\end_layout

\begin_layout Standard

In this guide we will be using Apache with the passenger extension as webserver and guide you through the installation process on a Debian 6 server. The passenger extension adds Ruby on Rails support to Apache webservers.
\end_layout

\begin_layout Standard

We can only ensure full compatibility of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 with the version in brackets. In the following steps we will denote the version of ruby as 
\family typewriter

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

<RUBY_VERSION>
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\family default
.
\end_layout

\begin_layout Enumerate

To install Ruby, use the command:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

apt-get install ruby<RUBY_VERSION>-full
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

This will install ruby, all of its dependencies and developmental libraries of the chosen ruby version. We create some symlinks such that the ruby executables are available without providing the version number. If you do not create these symlinks, this can cause problems during the installation process.
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

ln -s /usr/bin/ruby<RUBY_VERSION> /usr/bin/ruby
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

ln -s /usr/bin/gem<RUBY_VERSION> /usr/bin/gem
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

ln -s /var/lib/gems/<RUBY_VERSION>/bin/bundle /usr/bin/bundle
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

You can verify, that the creation was successful, by using the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

which
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 command and the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

-v
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 command line switch of the corresponding commands.
\end_layout

\begin_layout Standard

We install the bundler gem, which will be needed later on to install gem dependencies of our website.
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

gem install bundler
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

To install Apache:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

apt-get install apache2
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

This will install the apache webserver with a default setup. We will modify this later on by adding a virtual host.
\end_layout

\end_deeper
\begin_layout Enumerate

Now we can install the passenger ruby gem, which will provide us with a script that installs the apache passenger module.
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

gem install passenger
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

We assume the passenger gem has been installed to
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\family typewriter
/var/lib/gems/<RUBY_VERSION>/gems/passenger-<PASSENGER_VERSION>/
\family default

\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

such that in the subfolder 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

bin
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 we can find and execute the script
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

passenger-install-apache2-module
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The last command will give you some hints, about missing packages. For every missing package the install command is provided. Please follow these hints and install the missing packages. Also the passenger installer will tell you, how you have to modify your 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

/etc/apache2/apache2.conf
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 in order for your apache webserver to load the passenger module. 
\end_layout

\end_deeper
\begin_layout Subsection

Frontend
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "install_frontend"

\end_inset

 At this point Ruby and Apache together with the passenger module are assumed to be installed. Now you can install the frontend website, by downloading a zip-file from our server containing the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 website. After extracting the archive and placing the website at your favored location, you will use some ruby commands, to install all remaining package dependencies (gems) required by the website. 
\end_layout

\begin_layout Enumerate

Download and extract the latest version of the frontend from our 
\begin_inset CommandInset href
LatexCommand href
name "website"
target "\urlfrontend"

\end_inset

. Place the extracted contents in your favored directory. We will denote this path by 
\family typewriter
<WEBSITE_ROOT>
\family default
 in the following steps. 
\end_layout

\begin_layout Enumerate

In your terminal navigate to 
\family typewriter
<WEBSITE_ROOT>
\family default
 and execute the command
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

bundle install --no-deployment
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

bundle install --deployment
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

This will install all gems required by the website. For this process an internet connection is required. 
\end_layout

\end_deeper
\begin_layout Enumerate

Create an Apache virtual host by creating the file '/etc/apache2/sites-available/clusteval' with the following content and replace the placeholders 
\family typewriter
<YOUR_DOMAIN>
\family default
 and 
\family typewriter
<WEBSITE_ROOT>
\family default
 with your values. 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

 <VirtualHost *:80> ServerName <YOURDOMAIN> DocumentRoot <WEBSITEROOT>/public <Directory <WEBSITEROOT>/public> # This relaxes Apache security settings. AllowOverride all # MultiViews must be turned off. Options -MultiViews </Directory> </VirtualHost> 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 
\end_layout

\begin_layout Enumerate

You can use the apache2 virtual host configuration command to enable your new clusteval virtual host
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

a2ensite clusteval
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

Afterwards you can restart your Apache Webserver, for the new settings to take effect.
\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

apache2ctl restart
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

Now we tell the website which database to use by adapting the database name and user details in 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset Formula $<$
\end_inset

WEBSITE_ROOT
\begin_inset Formula $>$
\end_inset

/config/database.yml
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate

To initialize the database with a default state, perform
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
codei{
\end_layout

\end_inset

rake db:reset
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Section

Basic Usage
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "sec_usage"

\end_inset


\end_layout

\begin_layout Subsection

Backend server
\end_layout

\begin_layout Subsubsection

Command line
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "backend_server_cli"

\end_inset

 The backend server provides several command line options: 
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

-absRepoPath $<$absRepositoryPath$>$
\end_layout

\end_inset

 is the absolute path to the repository which should be used by the backend server to store results and parse any data from. 
\end_layout

\begin_layout Description

-help prints help and usage information. 
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

-logLevel $<$level$>$
\end_layout

\end_inset

 defines the log level of the server. This determines, how verbose the server will be during its execution. Default is 3=INFO. All available logging levels are: 0=ALL, 1=TRACE, 2=DEBUG, 3=INFO, 4=WARN, 5=ERROR, 6=OFF 
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

-serverPort $<$port$>$
\end_layout

\end_inset

 is the port the backend server should listen for clients 
\end_layout

\begin_layout Subsection

Backend client
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "backend_client"

\end_inset

 
\end_layout

\begin_layout Subsubsection

Command line
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "backend_client_cli"

\end_inset

 Supported commands are: 
\end_layout

\begin_layout Description

-getDataSets : This tells the client to get and print the available datasets from the server. 
\end_layout

\begin_layout Description

-getPrograms : This tells the client to get and print the available programs from the server. 
\end_layout

\begin_layout Description

-getQueue : Gets the enqueued runs and run resumes from the backend server. 
\end_layout

\begin_layout Description

-getRuns : This tells the client to get and print the available runs from the server. 
\end_layout

\begin_layout Description

-getRunResumes : This tells the client to get and print all the run result directories contained in the repository of this server. Those run result directories can be resumed, if they were terminated before. 
\end_layout

\begin_layout Description

-getRunResults : This tells the client to get and print all the run result directories contained in the repository of this server, that contain a clusters subfolder and at least one *.complete file containing results (can be slow if many run result folders are present). 
\end_layout

\begin_layout Description

-getRunStatus : This tells the client to get the status and percentage (if) of a certain run. 
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

-performRun $<$runName$>$
\end_layout

\end_inset

 : This tells the client to perform a run with a certain name. 
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

-resumeRun $<$runResultIdentifier$>$
\end_layout

\end_inset

 : This tells the client to resume a run previously performed identified by its run result identifier. 
\end_layout

\begin_layout Description


\begin_inset ERT
status collapsed

\begin_layout Standard

-terminateRun $<$runName$>$
\end_layout

\end_inset

 : This tells the client to terminate the execution of a run with a certain name. shutdown: This tells the client to shutdown the framework. 
\end_layout

\begin_layout Description

-waitForRuns : This option can be used together with getRunStatus, in order to cause the client to wait until the run has finished its execution. 
\end_layout

\begin_layout Subsection

Starting the framework
\end_layout

\begin_layout Subsection

Creating and Executing a Parameter Optimization Run
\end_layout

\begin_layout Subsection

Creating and Executing a Data Analysis Run
\end_layout

\begin_layout Subsection

Get the run status with the backend client
\end_layout

\begin_layout Section

Extending the Framework
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "sec_extend"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 can be extended in different ways. The following sections will show you, which functionality you can add to the framework and how. 
\end_layout

\begin_layout Subsection

Clustering Methods
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_extend_programs"

\end_inset

 As explained in 
\begin_inset CommandInset ref
LatexCommand ref
reference "programs"

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 supports two different kinds of clustering methods: Standalone programs and R programs. Standalone programs are those, for which you have to provide an executable file which then will be executed by the framework. R programs are methods implemented in R, which will be invoked by 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 by using the Rserve interface. 
\end_layout

\begin_layout Subsubsection

Standalone Programs
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsubsec_extend_standprograms"

\end_inset

 Standalone programs can be added to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 by 
\end_layout

\begin_layout Enumerate

putting the executable file (together with all required shared libraries) into a respective folder in the repository programs directory
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
repoprogramexec
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate

putting a program configuration file (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_programconfigs"

\end_inset

) into the repository program configuration directory
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
repoprogramconfigs
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate

if the program requires a new input format, follow the instructions under 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_extend_datasetformats"

\end_inset

 for the new input format 
\end_layout

\begin_layout Enumerate

if the program has an unknown output format, follow the instructions under 
\begin_inset CommandInset ref
LatexCommand ref
reference "subsec_extend_runresultformats"

\end_inset

 for the new output format 
\end_layout

\begin_layout Subsubsection

R Programs
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsubsec_extend_rprograms"

\end_inset

 R programs can be added to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 by 
\end_layout

\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.program.r.RProgram
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRProgram
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your class. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyRProgram(Repository)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor of your class taking a repository parameter. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyRProgram(MyRProgram)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor of your class taking another instance of your class. This constructor has to be implemented and public. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public String getAlias()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This alias is used whenever this program is visually represented and a readable name is needed. This is used to represent your program on the website for example. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public String getInvocationFormat()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This is the invocation of the R method including potential parameters, that have to be defined in the program configuration. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public Set getRequiredLibraries()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method returns the set of strings, with names of all required R libraries this program uses. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public Process exec(DataConfig,ProgramConfig,String[],Map,Map)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: In this method the actual execution of the R Program happens. In here you have to implement the invocation of the R method via Rserve and any pre- and postcalculations necessary. The communications with R can be visualized by the following code snippet: 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
begin{verbatim}
\end_layout

\end_inset

 try 
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

 // precalculations double[] input = ...; ... MyRengine rEngine = new MyRengine(""); try 
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

 rEngine.assign("input",input); rEngine.eval("result <- yourMethodInvocation()"); REXP result = rEngine.eval("result@.Data");
\end_layout

\begin_deeper
\begin_layout Standard

// postcalculations ... 
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 catch (RserveException e) 
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

 e.printStackTrace(); 
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 finally 
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

 rEngine.close(); 
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 catch (Exception e) 
\begin_inset ERT
status collapsed

\begin_layout Standard

{
\end_layout

\end_inset

 e.printStackTrace(); 
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 // for return type compatibility reasons return null;
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
end{verbatim}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate

Creating a jar file named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRProgram.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 containing the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRProgram.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 compiled on your machine in the correct folder structure corresponding to the packages:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/program/r/MyRProgram.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate

Putting the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRProgram.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 into the programs folder of the repository:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
repoprograms
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The backend server will recognize and try to load the new program automatically the next time, the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

RProgramFinderThread
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 checks the filesystem.
\end_layout

\end_deeper
\begin_layout Subsection

Dataset Types
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_extend_datasettypes"

\end_inset

 Dataset types can be added to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 by 
\end_layout

\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.data.dataset.type.DataSetType
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataSetType
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your class. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyDataSetType(Repository, boolean,long, File)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor of your class. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyDataSetType(MyDataSetType)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor of your class taking another instance of your class. This constructor has to be implemented and public. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public String getAlias()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This alias is used whenever this program is visually represented and a readable name is needed. This is used to represent your program on the website for example. 
\end_layout

\end_deeper
\begin_layout Enumerate

Creating a jar file named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataSetType.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 containing the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataSetType.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 compiled on your machine in the correct folder structure corresponding to the packages:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/data/dataset/type/MyDataSetType.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate

Putting the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataSetType.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 into the dataset types folder of the repository:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reposuppdstypes
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The backend server will recognize and try to load the new dataset type automatically the next time, the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

DataSetTypeFinderThread
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 checks the filesystem. 
\end_layout

\end_deeper
\begin_layout Subsection

Dataset Formats
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_extend_datasetformats"

\end_inset

 A dataset format 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataSetFormat
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 can be added to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 by 
\end_layout

\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.data.dataset.format.DataSetFormat
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataSetFormat
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your dataset format. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyDataSetFormat(Repository, boolean, long, File, int)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor of your dataset format class. This constructor has to be implemented and public, otherwise the framework will not be able to load your dataset format. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyDataSetFormat(MyDataSetFormat)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor of your class taking another instance of your class. This constructor has to be implemented and public. 
\end_layout

\end_deeper
\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.data.dataset.format.DataSetFormatParser
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataSetFormatParser
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your class. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public DataSet convertToStandardFormat(DataSet,
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset space \hspace{}
\length 10mm
\end_inset

ConversionInputToStandardConfiguration)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method converts the given dataset to the standard input format of the framework using the given conversion configuration. This assumes, that the passed dataset has this format. 
\end_layout

\end_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public DataSet convertToThisFormat(DataSet, DataSetFormat,
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset space \hspace{}
\length 10mm
\end_inset

ConversionConfiguration)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method converts the given dataset to the given input format using the conversion configuration. 
\end_layout

\end_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public Object parse(DataSet)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method parses the given dataset and returns an object, wrapping the contents of the dataset (e.g. an instance of 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

SimilarityMatrix
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 or 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

DataMatrix
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

). 
\end_layout

\end_deeper
\begin_layout Enumerate

Creating a jar file named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataSetFormat.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 containing the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataSetFormat.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataSetFormatParser.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 compiled on your machine in the correct folder structure corresponding to the packages:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/data/dataset/format/MyDataSetFormat.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/data/dataset/format/MyDataSetFormatParser.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate

Putting the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataSetFormat.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 into the dataset formats folder of the repository:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reposuppinputformats
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The backend server will recognize and try to load the new dataset format automatically the next time, the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

DataSetFormatFinderThread
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 checks the filesystem. 
\end_layout

\end_deeper
\begin_layout Subsection

Runresult Formats
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_extend_runresultformats"

\end_inset

 A runresult format 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunResultFormat
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 can be added to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 by 
\end_layout

\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.run.result.format.RunResultFormat
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunResultFormat
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your runresult format. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyRunResultFormat(Repository, boolean, long, File)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor of your runresult format class. This constructor has to be implemented and public, otherwise the framework will not be able to load your runresult format. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyRunResultFormat(MyRunResultFormat)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor of your class taking another instance of your class. This constructor has to be implemented and public. 
\end_layout

\end_deeper
\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.run.result.format.RunResultFormatParser
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunResultFormatParser
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your class. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\size footnotesize

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public void convertToStandardFormat()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\size default
: This method converts the given runresult to the standard runresult format of the framework. The converted runresult has to be named exactly as the input file postfixed with the extension ".conv". The original runresult
\end_layout

\begin_deeper
\begin_layout Standard


\size footnotesize

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reporesult
\end_layout

\end_inset

/clusters/TransClust_sfld.1.result
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\size default

\end_layout

\begin_layout Standard

has to be converted to
\end_layout

\begin_layout Standard


\size footnotesize

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reporesult
\end_layout

\end_inset

/clusters/TransClust_sfld.1.result.conv
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\size default

\end_layout

\begin_layout Standard

by this method. A wrapper object for the converted runresult has to be stored in the result attribute. 
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate

Creating a jar file named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunResultFormat.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 containing the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunResultFormat.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunResultFormatParser.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 compiled on your machine in the correct folder structure corresponding to the packages:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/run/result/format/MyRunResultFormat.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/run/result/format/MyRunResultFormatParser.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

Putting the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunResultFormat.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 into the runresult formats folder of the repository:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reposuppresultformats
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The backend server will recognize and try to load the new runresult format automatically the next time, the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

RunResultFormatFinderThread
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 checks the filesystem. 
\end_layout

\end_deeper
\begin_layout Subsection

Parameter Optimization Methods
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_extend_paramoptmethods"

\end_inset

 A parameter optimization method 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyParameterOptimizationMethod
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 can be added to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 by 
\end_layout

\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.cluster.paramOptimization.ParameterOptimizationMethod
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyParameterOptimizationMethod
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your parameter optimization method. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyParameterOptimizationMethod(Repository, boolean, long, File,
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset space \hspace{}
\length 10mm
\end_inset

ParameterOptimizationRun, ProgramConfig, DataConfig, List,
\end_layout

\begin_layout Standard


\begin_inset space \hspace{}
\length 10mm
\end_inset

ClusteringQualityMeasure, int[], boolean)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor for your parameter optimization method. This constructor has to be implemented and public, otherwise the framework will not be able to load your parameter optimization method. 
\end_layout

\end_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyParameterOptimizationMethod( MyParameterOptimizationMethod)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor for your parameter optimization method. This constructor has to be implemented and public, otherwise the framework will not be able to load your parameter optimization method. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public List getCompatibleDataSetFormatBaseClasses()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: A list of dataset formats, this parameter optimization method can be used for. If the list is empty, all dataset formats are assumed to be compatible. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public List getCompatibleProgramNames()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: A list of names of all programs that are compatible to this parameter optimization method. If the list is empty, all programs are assumed to be compatible. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public boolean hasNext()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method indicates, whether their is another parameter set to evaluate. This method 
\series bold
must not change
\series default
 the current parameter set, as it may be invoked several times before next() is invoked. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

protected ParameterSet getNextParameterSet(ParameterSet)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Returns the next parameter set to evaluate. This method may change the internal status of the parameter optimization method, in that it stores the newly determined and returned parameter set as the current parameter set. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public Set getRequiredRlibraries()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Returns a set of names of all R libraries, this parameter optimization method requires. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public int getTotalIterationCount()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This is the total iteration count this parameter optimization method will perform. The returned value might not correspond to the expected value, when the method is instantiated. Therefore always use the return value of this method, when trying to determine the finished percentage of the parameter optimization process. 
\end_layout

\end_deeper
\begin_layout Enumerate

Creating a jar file named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyParameterOptimizationMethod.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 containing the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyParameterOptimizationMethod.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 compiled on your machine in the correct folder structure corresponding to the packages:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/cluster/paramOptimization/MyParameterOptimizationMethod.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

Putting the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyParameterOptimizationMethod.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 into the parameter optimization methods folder of the repository:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reposuppparamopts
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The backend server will recognize and try to load the new parameter optimization method automatically the next time, the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

ParameterOptimizationMethodFinderThread
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 checks the filesystem. 
\end_layout

\end_deeper
\begin_layout Subsection

Distance Measures
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_extend_distmeasures"

\end_inset

 A distance measure 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDistanceMeasure
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 can be added to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 by 
\end_layout

\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.data.distance.DistanceMeasure
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDistanceMeasure
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your distance measure. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyDistanceMeasure(Repository, boolean, long, File)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor for your distance measure. This constructor has to be implemented and public, otherwise the framework will not be able to load your distance measure. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyDistanceMeasure(MyDistanceMeasure)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor for your distance measure. This constructor has to be implemented and public, otherwise the framework will not be able to load your distance measure. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public double getDistance(double[],double[])
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method is the core of your distance measure. It returns the distance of the two points specified by the absolute coordinates in the two double arrays. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public boolean supportsMatrix()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method indicates, whether your distance measure can calculate distances of a whole set of point-pairs, i.e. your distance measure implements the method getDistances(double[][]). 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public double[][] getDistances(double[][])
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The absolute coordinates of the points are stored row-wise in the given matrix and distances are calculated between every pair of rows. Position [i][j] of the returned double[][] matrix contains the distance between the i-th and j-th row of the input matrix. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public Set getRequiredRlibraries()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Returns a set of names of all R libraries, this distance measure requires. 
\end_layout

\end_deeper
\begin_layout Enumerate

Creating a jar file named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDistanceMeasure.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 containing the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDistanceMeasure.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 compiled on your machine in the correct folder structure corresponding to the packages:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/data/distance/MyDistanceMeasure.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

Putting the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDistanceMeasure.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 into the distance measure folder of the repository:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reposuppdistmeasures
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The backend server will recognize and try to load the new distance measure automatically the next time, the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

DistanceMeasureFinderThread
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 checks the filesystem. 
\end_layout

\end_deeper
\begin_layout Subsection

Clustering Quality Measures
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_extend_qualitymeasures"

\end_inset

 A clustering quality measure 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyClusteringQualityMeasure
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 can be added to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 by 
\end_layout

\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.cluster.quality.ClusteringQualityMeasure
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyClusteringQualityMeasure
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your clustering quality measure. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyClusteringQualityMeasure(Repository, boolean, long, File)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor for your distance measure. This constructor has to be implemented and public, otherwise the framework will not be able to load your clustering quality measure. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyClusteringQualityMeasure(MyClusteringQualityMeasure)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor for your distance measure. This constructor has to be implemented and public, otherwise the framework will not be able to load your clustering quality measure. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public String getAlias()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method returns a readable alias for this clustering quality measure which is used e.g. on the website. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public double getMinimum()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Returns the minimal value this measure can calculate. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public double getMaximum()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Returns the maximal value this measure can calculate. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public boolean requiresGoldStandard()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Indicates, whether this clustering quality measure requires a goldstandard to assess the quality of a given clustering. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public ClusteringQualityMeasureValue getQualityOfClustering(Clustering)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method is the core of your clustering quality measure. It assesses and returns the quality of the given clustering. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public boolean isBetterThanHelper(ClusteringQualityMeasureValue
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method is used by sorting algorithms of the framework to compare clustering quality measure results and find the optimal parameter sets. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public Set getRequiredRlibraries()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Returns a set of names of all R libraries, this clustering quality measure requires. 
\end_layout

\end_deeper
\begin_layout Enumerate

Creating a jar file named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyClusteringQualityMeasure.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 containing the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyClusteringQualityMeasure.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 compiled on your machine in the correct folder structure corresponding to the packages:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/cluster/quality/MyClusteringQualityMeasure.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

Putting the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyClusteringQualityMeasure.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 into the clustering quality measure folder of the repository:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reposuppqualmeasures
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The backend server will recognize and try to load the new clustering quality measure automatically the next time, the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

ClusteringQualityMeasureFinderThread
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 checks the filesystem. 
\end_layout

\end_deeper
\begin_layout Subsection

Data Statistics
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_extend_datastats"

\end_inset

 A data statistic 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 can be added to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 by 
\end_layout

\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.data.statistic.DataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your class. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyDataStatistic(Repository, boolean, long, File)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor for your data statistic. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyDataStatistic(MyDataStatistic)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor for your data statistic. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public boolean requiresGoldStandard()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Indicates, whether this data statistic requires a goldstandard to assess the property of a given dataset. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public String getAlias()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method returns a readable alias for this data statistic which is used e.g. on the website. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public void parseFromString(String)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method interprets the string and fills this statistic object with its parsed contents. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public Set getRequiredRlibraries()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Returns a set of names of all R libraries, this data statistic requires. 
\end_layout

\end_deeper
\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.data.statistic.DataStatisticCalculator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataStatisticCalculator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your class. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyDataStatisticCalculator(Repository, long, File, DataConfig)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor for your data statistic calculator. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyDataStatisticCalculator(MyDataStatisticCalculator)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor for your data statistic calculator. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

protected MyDataStatistic calculateResult()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method is the core of your data statistic calculator. It analysis the given data configuration and returns a wrapper object for the results. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public void writeOutputTo(File)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: After calculateResult() has been invoked, this method writes the assessed results into the given file. 
\end_layout

\end_deeper
\begin_layout Enumerate

Creating a jar file named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataStatisticCalculator.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 containing the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataStatistic.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataStatisticCalculator.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 compiled on your machine in the correct folder structure corresponding to the packages:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/data/statistics/MyDataStatistic.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/data/statistics/MyDataStatisticCalculator.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

Putting the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyDataStatistic.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 into the data statistics folder of the repository:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reposuppdatastats
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The backend server will recognize and try to load the new data statistics automatically the next time, the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

DataStatisticFinderThread
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 checks the filesystem. 
\end_layout

\end_deeper
\begin_layout Subsection

Run Statistics
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_extend_runstats"

\end_inset

 A run statistic 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 can be added to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 by 
\end_layout

\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.run.statistic.RunStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your class. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyRunStatistic(Repository, boolean, long, File)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor for your run statistic. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyRunStatistic(MyRunStatistic)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor for your run statistic. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public String getAlias()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method returns a readable alias for this run statistic which is used e.g. on the website. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public void parseFromString(String)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method interprets the string and fills this statistic object with its parsed contents. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public Set getRequiredRlibraries()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Returns a set of names of all R libraries, this run statistic requires. 
\end_layout

\end_deeper
\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.run.statistic.RunStatisticCalculator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunStatisticCalculator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your class. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyRunStatisticCalculator(Repository, long, File, DataConfig)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor for your run statistic calculator. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyRunStatisticCalculator(MyRunStatisticCalculator)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor for your run statistic calculator. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

protected MyRunStatistic calculateResult()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method is the core of your run statistic calculator. It analysis the given runresults and returns a wrapper object for the results. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public void writeOutputTo(File)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: After calculateResult() has been invoked, this method writes the assessed results into the given file. 
\end_layout

\end_deeper
\begin_layout Enumerate

Creating a jar file named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunStatisticCalculator.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 containing the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunStatistic.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunStatisticCalculator.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 compiled on your machine in the correct folder structure corresponding to the packages:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/run/statistics/MyRunStatistic.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/run/statistics/MyRunStatisticCalculator.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

Putting the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunStatistic.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 into the run statistics folder of the repository:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reposupprunstats
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The backend server will recognize and try to load the new run statistics automatically the next time, the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

RunStatisticFinderThread
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 checks the filesystem. 
\end_layout

\end_deeper
\begin_layout Subsection

Run-Data Statistics
\end_layout

\begin_layout Standard


\begin_inset CommandInset label
LatexCommand label
name "subsec_extend_rundatastats"

\end_inset

 A run-data statistic 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 can be added to 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
clusteval
\end_layout

\end_inset

 by 
\end_layout

\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.run.statistic.RunDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunDataStatistic
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your class. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyRunDataStatistic(Repository, boolean, long, File)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor for your run-data statistic. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyRunDataStatistic(MyRunDataStatistic)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor for your run-data statistic. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public String getAlias()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method returns a readable alias for this run-data statistic which is used e.g. on the website. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public void parseFromString(String)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method interprets the string and fills this statistic object with its parsed contents. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public Set getRequiredRlibraries()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: Returns a set of names of all R libraries, this run-data statistic requires. 
\end_layout

\end_deeper
\begin_layout Enumerate

extending the class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

de.clusteval.run.statistic.RunDataStatisticCalculator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 with your own class 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunDataStatisticCalculator
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

. You have to provide your own implementations for the following methods, otherwise the framework will not be able to load your class. 
\end_layout

\begin_deeper
\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyRunDataStatisticCalculator(Repository, long, File, DataConfig)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The constructor for your run-data statistic calculator. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public MyRunDataStatisticCalculator(MyRunDataStatisticCalculator)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: The copy constructor for your run-data statistic calculator. This constructor has to be implemented and public, otherwise the framework will not be able to load your class. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

protected MyRunDataStatistic calculateResult()
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: This method is the core of your run-data statistic calculator. It analysis the given runresults (data analysis and clustering) and returns a wrapper object for the results. 
\end_layout

\begin_layout Enumerate


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

public void writeOutputTo(File)
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

: After calculateResult() has been invoked, this method writes the assessed results into the given file. 
\end_layout

\end_deeper
\begin_layout Enumerate

Creating a jar file named 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunDataStatisticCalculator.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 containing the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunDataStatistic.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 and 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunDataStatisticCalculator.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 compiled on your machine in the correct folder structure corresponding to the packages:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/run/statistics/MyRunDataStatistic.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
code{
\end_layout

\end_inset

de/clusteval/run/statistics/MyRunDataStatisticCalculator.class
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate

Putting the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

MyRunDataStatistic.jar
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 into the run-data statistics folder of the repository:
\end_layout

\begin_deeper
\begin_layout Standard


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
reposupprundatastats
\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard

The backend server will recognize and try to load the new run-data statistics automatically the next time, the 
\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
highlight{
\end_layout

\end_inset

RunDataStatisticFinderThread
\begin_inset ERT
status collapsed

\begin_layout Standard

}
\end_layout

\end_inset

 checks the filesystem. 
\end_layout

\end_deeper
\begin_layout Standard

 
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "doku"
options "plain"

\end_inset

 
\end_layout

\end_body
\end_document
